// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        data_4_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] data_0_V_read;
input  [15:0] data_1_V_read;
input  [15:0] data_2_V_read;
input  [15:0] data_3_V_read;
input  [15:0] data_4_V_read;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [16:0] exp_table1_q0;
wire   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [16:0] exp_table1_q1;
wire   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [16:0] exp_table1_q2;
wire   [9:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [16:0] exp_table1_q3;
wire   [9:0] exp_table1_address4;
reg    exp_table1_ce4;
wire   [16:0] exp_table1_q4;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [17:0] invert_table2_q0;
reg  signed [15:0] data_4_V_read_1_reg_1055;
reg  signed [15:0] data_4_V_read_1_reg_1055_pp0_iter1_reg;
reg  signed [15:0] data_4_V_read_1_reg_1055_pp0_iter2_reg;
reg  signed [15:0] data_3_V_read_1_reg_1062;
reg  signed [15:0] data_3_V_read_1_reg_1062_pp0_iter1_reg;
reg  signed [15:0] data_3_V_read_1_reg_1062_pp0_iter2_reg;
reg  signed [15:0] data_2_V_read_1_reg_1068;
reg  signed [15:0] data_2_V_read_1_reg_1068_pp0_iter1_reg;
reg  signed [15:0] data_2_V_read_1_reg_1068_pp0_iter2_reg;
reg  signed [15:0] data_1_V_read_1_reg_1074;
reg  signed [15:0] data_1_V_read_1_reg_1074_pp0_iter1_reg;
reg  signed [15:0] data_1_V_read_1_reg_1074_pp0_iter2_reg;
reg  signed [15:0] data_0_V_read_1_reg_1080;
reg  signed [15:0] data_0_V_read_1_reg_1080_pp0_iter1_reg;
reg  signed [15:0] data_0_V_read_1_reg_1080_pp0_iter2_reg;
wire   [0:0] icmp_ln1496_fu_172_p2;
reg   [0:0] icmp_ln1496_reg_1086;
wire   [0:0] icmp_ln1496_1_fu_178_p2;
reg   [0:0] icmp_ln1496_1_reg_1091;
wire   [15:0] select_ln66_2_fu_200_p3;
reg   [15:0] select_ln66_2_reg_1096;
wire   [15:0] x_max_V_fu_212_p3;
reg   [15:0] x_max_V_reg_1102;
wire   [9:0] y_V_fu_522_p3;
reg   [9:0] y_V_reg_1107;
wire   [9:0] y_V_1_fu_556_p3;
reg   [9:0] y_V_1_reg_1112;
wire   [9:0] y_V_2_fu_590_p3;
reg   [9:0] y_V_2_reg_1117;
wire   [9:0] y_V_3_fu_624_p3;
reg   [9:0] y_V_3_reg_1122;
wire   [9:0] y_V_4_fu_658_p3;
reg   [9:0] y_V_4_reg_1127;
reg   [9:0] y_V_4_reg_1127_pp0_iter4_reg;
reg   [9:0] y_V_4_reg_1127_pp0_iter5_reg;
reg   [16:0] exp_res_0_V_reg_1152;
reg   [16:0] exp_res_0_V_reg_1152_pp0_iter6_reg;
reg   [16:0] exp_res_0_V_reg_1152_pp0_iter7_reg;
reg   [16:0] exp_res_0_V_reg_1152_pp0_iter8_reg;
reg   [16:0] exp_res_0_V_reg_1152_pp0_iter9_reg;
reg   [16:0] exp_res_0_V_reg_1152_pp0_iter10_reg;
reg   [16:0] exp_res_1_V_reg_1158;
reg   [16:0] exp_res_1_V_reg_1158_pp0_iter6_reg;
reg   [16:0] exp_res_1_V_reg_1158_pp0_iter7_reg;
reg   [16:0] exp_res_1_V_reg_1158_pp0_iter8_reg;
reg   [16:0] exp_res_1_V_reg_1158_pp0_iter9_reg;
reg   [16:0] exp_res_1_V_reg_1158_pp0_iter10_reg;
reg   [16:0] exp_res_2_V_reg_1164;
reg   [16:0] exp_res_2_V_reg_1164_pp0_iter6_reg;
reg   [16:0] exp_res_2_V_reg_1164_pp0_iter7_reg;
reg   [16:0] exp_res_2_V_reg_1164_pp0_iter8_reg;
reg   [16:0] exp_res_2_V_reg_1164_pp0_iter9_reg;
reg   [16:0] exp_res_2_V_reg_1164_pp0_iter10_reg;
reg   [16:0] exp_res_3_V_reg_1170;
reg   [16:0] exp_res_3_V_reg_1170_pp0_iter6_reg;
reg   [16:0] exp_res_3_V_reg_1170_pp0_iter7_reg;
reg   [16:0] exp_res_3_V_reg_1170_pp0_iter8_reg;
reg   [16:0] exp_res_3_V_reg_1170_pp0_iter9_reg;
reg   [16:0] exp_res_3_V_reg_1170_pp0_iter10_reg;
wire  signed [17:0] p_Val2_12_fu_706_p3;
reg  signed [17:0] p_Val2_12_reg_1181;
wire  signed [17:0] p_Val2_13_fu_734_p3;
reg  signed [17:0] p_Val2_13_reg_1187;
reg   [16:0] exp_res_4_V_reg_1193;
reg   [16:0] exp_res_4_V_reg_1193_pp0_iter8_reg;
reg   [16:0] exp_res_4_V_reg_1193_pp0_iter9_reg;
reg   [16:0] exp_res_4_V_reg_1193_pp0_iter10_reg;
wire  signed [17:0] p_Val2_16_fu_820_p3;
reg  signed [17:0] p_Val2_16_reg_1200;
wire   [9:0] y_V_5_fu_920_p3;
reg   [9:0] y_V_5_reg_1206;
reg   [17:0] inv_exp_sum_V_reg_1216;
wire  signed [25:0] sext_ln1116_fu_932_p1;
wire  signed [25:0] grp_fu_1025_p2;
reg  signed [25:0] mul_ln1118_reg_1255;
wire  signed [25:0] grp_fu_1031_p2;
reg  signed [25:0] mul_ln1118_1_reg_1260;
wire  signed [25:0] grp_fu_1037_p2;
reg  signed [25:0] mul_ln1118_2_reg_1265;
wire  signed [25:0] grp_fu_1043_p2;
reg  signed [25:0] mul_ln1118_3_reg_1270;
wire  signed [25:0] grp_fu_1049_p2;
reg  signed [25:0] mul_ln1118_4_reg_1275;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln255_fu_666_p1;
wire   [63:0] zext_ln255_1_fu_670_p1;
wire   [63:0] zext_ln255_2_fu_674_p1;
wire   [63:0] zext_ln255_3_fu_678_p1;
wire   [63:0] zext_ln255_4_fu_682_p1;
wire   [63:0] zext_ln265_fu_928_p1;
wire  signed [15:0] icmp_ln1496_fu_172_p0;
wire  signed [15:0] icmp_ln1496_fu_172_p1;
wire  signed [15:0] icmp_ln1496_1_fu_178_p0;
wire  signed [15:0] icmp_ln1496_1_fu_178_p1;
wire   [15:0] select_ln66_fu_184_p3;
wire   [15:0] select_ln66_1_fu_189_p3;
wire   [0:0] icmp_ln1496_2_fu_194_p2;
wire   [0:0] icmp_ln1496_3_fu_208_p2;
wire  signed [16:0] sext_ln703_fu_218_p1;
wire  signed [16:0] sext_ln703_1_fu_221_p1;
wire   [16:0] sub_ln1193_fu_224_p2;
wire   [0:0] tmp_3_fu_238_p3;
wire   [0:0] tmp_1_fu_230_p3;
wire   [0:0] xor_ln786_fu_246_p2;
wire   [0:0] xor_ln340_fu_264_p2;
wire  signed [16:0] sext_ln703_2_fu_276_p1;
wire   [16:0] sub_ln1193_1_fu_279_p2;
wire   [0:0] tmp_7_fu_293_p3;
wire   [0:0] tmp_5_fu_285_p3;
wire   [0:0] xor_ln786_1_fu_301_p2;
wire   [0:0] xor_ln340_1_fu_319_p2;
wire  signed [16:0] sext_ln703_3_fu_331_p1;
wire   [16:0] sub_ln1193_2_fu_334_p2;
wire   [0:0] tmp_10_fu_348_p3;
wire   [0:0] tmp_9_fu_340_p3;
wire   [0:0] xor_ln786_2_fu_356_p2;
wire   [0:0] xor_ln340_2_fu_374_p2;
wire  signed [16:0] sext_ln703_4_fu_386_p1;
wire   [16:0] sub_ln1193_3_fu_389_p2;
wire   [0:0] tmp_12_fu_403_p3;
wire   [0:0] tmp_11_fu_395_p3;
wire   [0:0] xor_ln786_3_fu_411_p2;
wire   [0:0] xor_ln340_3_fu_429_p2;
wire  signed [16:0] sext_ln703_5_fu_441_p1;
wire   [16:0] sub_ln1193_4_fu_444_p2;
wire   [0:0] tmp_14_fu_458_p3;
wire   [0:0] tmp_13_fu_450_p3;
wire   [0:0] xor_ln786_4_fu_466_p2;
wire   [0:0] xor_ln340_4_fu_484_p2;
wire   [0:0] xor_ln340_5_fu_258_p2;
wire   [9:0] tmp_fu_496_p4;
wire   [0:0] and_ln786_fu_252_p2;
wire   [0:0] or_ln340_fu_270_p2;
wire   [9:0] select_ln340_fu_506_p3;
wire   [9:0] select_ln388_fu_514_p3;
wire   [0:0] xor_ln340_6_fu_313_p2;
wire   [9:0] tmp_2_fu_530_p4;
wire   [0:0] and_ln786_1_fu_307_p2;
wire   [0:0] or_ln340_1_fu_325_p2;
wire   [9:0] select_ln340_2_fu_540_p3;
wire   [9:0] select_ln388_1_fu_548_p3;
wire   [0:0] xor_ln340_7_fu_368_p2;
wire   [9:0] tmp_4_fu_564_p4;
wire   [0:0] and_ln786_2_fu_362_p2;
wire   [0:0] or_ln340_2_fu_380_p2;
wire   [9:0] select_ln340_4_fu_574_p3;
wire   [9:0] select_ln388_2_fu_582_p3;
wire   [0:0] xor_ln340_8_fu_423_p2;
wire   [9:0] tmp_6_fu_598_p4;
wire   [0:0] and_ln786_3_fu_417_p2;
wire   [0:0] or_ln340_3_fu_435_p2;
wire   [9:0] select_ln340_6_fu_608_p3;
wire   [9:0] select_ln388_3_fu_616_p3;
wire   [0:0] xor_ln340_9_fu_478_p2;
wire   [9:0] tmp_8_fu_632_p4;
wire   [0:0] and_ln786_4_fu_472_p2;
wire   [0:0] or_ln340_4_fu_490_p2;
wire   [9:0] select_ln340_8_fu_642_p3;
wire   [9:0] select_ln388_4_fu_650_p3;
wire   [17:0] p_Val2_6_fu_686_p1;
wire   [17:0] p_Val2_7_fu_689_p1;
wire   [17:0] p_Val2_8_fu_692_p2;
wire   [0:0] p_Result_s_fu_698_p3;
wire   [17:0] p_Val2_9_fu_714_p1;
wire   [17:0] p_Val2_10_fu_717_p1;
wire   [17:0] p_Val2_11_fu_720_p2;
wire   [0:0] p_Result_14_fu_726_p3;
wire  signed [18:0] rhs_V_fu_745_p1;
wire  signed [18:0] lhs_V_fu_742_p1;
wire   [18:0] ret_V_fu_748_p2;
wire   [17:0] p_Val2_15_fu_762_p2;
wire   [0:0] p_Result_16_fu_766_p3;
wire   [0:0] p_Result_15_fu_754_p3;
wire   [0:0] xor_ln786_5_fu_774_p2;
wire   [0:0] xor_ln340_11_fu_792_p2;
wire   [0:0] xor_ln340_10_fu_786_p2;
wire   [0:0] underflow_fu_780_p2;
wire   [0:0] or_ln340_5_fu_798_p2;
wire   [17:0] select_ln340_12_fu_804_p3;
wire   [17:0] select_ln388_5_fu_812_p3;
wire  signed [18:0] lhs_V_1_fu_831_p1;
wire   [18:0] rhs_V_1_fu_834_p1;
wire   [18:0] ret_V_1_fu_837_p2;
wire   [17:0] p_Val2_17_fu_828_p1;
wire   [17:0] p_Val2_19_fu_851_p2;
wire   [0:0] p_Result_18_fu_856_p3;
wire   [0:0] p_Result_17_fu_843_p3;
wire   [0:0] xor_ln786_6_fu_864_p2;
wire   [0:0] xor_ln340_13_fu_882_p2;
wire   [0:0] xor_ln340_12_fu_876_p2;
wire   [9:0] tmp_s_fu_894_p4;
wire   [0:0] underflow_1_fu_870_p2;
wire   [0:0] or_ln340_6_fu_888_p2;
wire   [9:0] select_ln340_14_fu_904_p3;
wire   [9:0] select_ln388_6_fu_912_p3;
wire  signed [17:0] grp_fu_1025_p0;
wire   [16:0] grp_fu_1025_p1;
wire  signed [17:0] grp_fu_1031_p0;
wire   [16:0] grp_fu_1031_p1;
wire  signed [17:0] grp_fu_1037_p0;
wire   [16:0] grp_fu_1037_p1;
wire  signed [17:0] grp_fu_1043_p0;
wire   [16:0] grp_fu_1043_p1;
wire  signed [17:0] grp_fu_1049_p0;
wire   [16:0] grp_fu_1049_p1;
reg    grp_fu_1025_ce;
reg    grp_fu_1031_ce;
reg    grp_fu_1037_ce;
reg    grp_fu_1043_ce;
reg    grp_fu_1049_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to13;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [25:0] grp_fu_1025_p10;
wire   [25:0] grp_fu_1031_p10;
wire   [25:0] grp_fu_1037_p10;
wire   [25:0] grp_fu_1043_p10;
wire   [25:0] grp_fu_1049_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
end

softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table1 #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3),
    .address4(exp_table1_address4),
    .ce4(exp_table1_ce4),
    .q4(exp_table1_q4)
);

softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_invert_table2 #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

myproject_mul_mul_18s_17ns_26_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_18s_17ns_26_3_1_U1193(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1025_p0),
    .din1(grp_fu_1025_p1),
    .ce(grp_fu_1025_ce),
    .dout(grp_fu_1025_p2)
);

myproject_mul_mul_18s_17ns_26_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_18s_17ns_26_3_1_U1194(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1031_p0),
    .din1(grp_fu_1031_p1),
    .ce(grp_fu_1031_ce),
    .dout(grp_fu_1031_p2)
);

myproject_mul_mul_18s_17ns_26_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_18s_17ns_26_3_1_U1195(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1037_p0),
    .din1(grp_fu_1037_p1),
    .ce(grp_fu_1037_ce),
    .dout(grp_fu_1037_p2)
);

myproject_mul_mul_18s_17ns_26_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_18s_17ns_26_3_1_U1196(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1043_p0),
    .din1(grp_fu_1043_p1),
    .ce(grp_fu_1043_ce),
    .dout(grp_fu_1043_p2)
);

myproject_mul_mul_18s_17ns_26_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_18s_17ns_26_3_1_U1197(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1049_p0),
    .din1(grp_fu_1049_p1),
    .ce(grp_fu_1049_ce),
    .dout(grp_fu_1049_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_0_V_read_1_reg_1080 <= data_0_V_read;
        data_0_V_read_1_reg_1080_pp0_iter1_reg <= data_0_V_read_1_reg_1080;
        data_1_V_read_1_reg_1074 <= data_1_V_read;
        data_1_V_read_1_reg_1074_pp0_iter1_reg <= data_1_V_read_1_reg_1074;
        data_2_V_read_1_reg_1068 <= data_2_V_read;
        data_2_V_read_1_reg_1068_pp0_iter1_reg <= data_2_V_read_1_reg_1068;
        data_3_V_read_1_reg_1062 <= data_3_V_read;
        data_3_V_read_1_reg_1062_pp0_iter1_reg <= data_3_V_read_1_reg_1062;
        data_4_V_read_1_reg_1055 <= data_4_V_read;
        data_4_V_read_1_reg_1055_pp0_iter1_reg <= data_4_V_read_1_reg_1055;
        icmp_ln1496_1_reg_1091 <= icmp_ln1496_1_fu_178_p2;
        icmp_ln1496_reg_1086 <= icmp_ln1496_fu_172_p2;
        select_ln66_2_reg_1096 <= select_ln66_2_fu_200_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_0_V_read_1_reg_1080_pp0_iter2_reg <= data_0_V_read_1_reg_1080_pp0_iter1_reg;
        data_1_V_read_1_reg_1074_pp0_iter2_reg <= data_1_V_read_1_reg_1074_pp0_iter1_reg;
        data_2_V_read_1_reg_1068_pp0_iter2_reg <= data_2_V_read_1_reg_1068_pp0_iter1_reg;
        data_3_V_read_1_reg_1062_pp0_iter2_reg <= data_3_V_read_1_reg_1062_pp0_iter1_reg;
        data_4_V_read_1_reg_1055_pp0_iter2_reg <= data_4_V_read_1_reg_1055_pp0_iter1_reg;
        exp_res_0_V_reg_1152_pp0_iter10_reg <= exp_res_0_V_reg_1152_pp0_iter9_reg;
        exp_res_0_V_reg_1152_pp0_iter6_reg <= exp_res_0_V_reg_1152;
        exp_res_0_V_reg_1152_pp0_iter7_reg <= exp_res_0_V_reg_1152_pp0_iter6_reg;
        exp_res_0_V_reg_1152_pp0_iter8_reg <= exp_res_0_V_reg_1152_pp0_iter7_reg;
        exp_res_0_V_reg_1152_pp0_iter9_reg <= exp_res_0_V_reg_1152_pp0_iter8_reg;
        exp_res_1_V_reg_1158_pp0_iter10_reg <= exp_res_1_V_reg_1158_pp0_iter9_reg;
        exp_res_1_V_reg_1158_pp0_iter6_reg <= exp_res_1_V_reg_1158;
        exp_res_1_V_reg_1158_pp0_iter7_reg <= exp_res_1_V_reg_1158_pp0_iter6_reg;
        exp_res_1_V_reg_1158_pp0_iter8_reg <= exp_res_1_V_reg_1158_pp0_iter7_reg;
        exp_res_1_V_reg_1158_pp0_iter9_reg <= exp_res_1_V_reg_1158_pp0_iter8_reg;
        exp_res_2_V_reg_1164_pp0_iter10_reg <= exp_res_2_V_reg_1164_pp0_iter9_reg;
        exp_res_2_V_reg_1164_pp0_iter6_reg <= exp_res_2_V_reg_1164;
        exp_res_2_V_reg_1164_pp0_iter7_reg <= exp_res_2_V_reg_1164_pp0_iter6_reg;
        exp_res_2_V_reg_1164_pp0_iter8_reg <= exp_res_2_V_reg_1164_pp0_iter7_reg;
        exp_res_2_V_reg_1164_pp0_iter9_reg <= exp_res_2_V_reg_1164_pp0_iter8_reg;
        exp_res_3_V_reg_1170_pp0_iter10_reg <= exp_res_3_V_reg_1170_pp0_iter9_reg;
        exp_res_3_V_reg_1170_pp0_iter6_reg <= exp_res_3_V_reg_1170;
        exp_res_3_V_reg_1170_pp0_iter7_reg <= exp_res_3_V_reg_1170_pp0_iter6_reg;
        exp_res_3_V_reg_1170_pp0_iter8_reg <= exp_res_3_V_reg_1170_pp0_iter7_reg;
        exp_res_3_V_reg_1170_pp0_iter9_reg <= exp_res_3_V_reg_1170_pp0_iter8_reg;
        exp_res_4_V_reg_1193_pp0_iter10_reg <= exp_res_4_V_reg_1193_pp0_iter9_reg;
        exp_res_4_V_reg_1193_pp0_iter8_reg <= exp_res_4_V_reg_1193;
        exp_res_4_V_reg_1193_pp0_iter9_reg <= exp_res_4_V_reg_1193_pp0_iter8_reg;
        inv_exp_sum_V_reg_1216 <= invert_table2_q0;
        mul_ln1118_1_reg_1260 <= grp_fu_1031_p2;
        mul_ln1118_2_reg_1265 <= grp_fu_1037_p2;
        mul_ln1118_3_reg_1270 <= grp_fu_1043_p2;
        mul_ln1118_4_reg_1275 <= grp_fu_1049_p2;
        mul_ln1118_reg_1255 <= grp_fu_1025_p2;
        p_Val2_12_reg_1181 <= p_Val2_12_fu_706_p3;
        p_Val2_13_reg_1187 <= p_Val2_13_fu_734_p3;
        p_Val2_16_reg_1200 <= p_Val2_16_fu_820_p3;
        x_max_V_reg_1102 <= x_max_V_fu_212_p3;
        y_V_1_reg_1112 <= y_V_1_fu_556_p3;
        y_V_2_reg_1117 <= y_V_2_fu_590_p3;
        y_V_3_reg_1122 <= y_V_3_fu_624_p3;
        y_V_4_reg_1127 <= y_V_4_fu_658_p3;
        y_V_4_reg_1127_pp0_iter4_reg <= y_V_4_reg_1127;
        y_V_4_reg_1127_pp0_iter5_reg <= y_V_4_reg_1127_pp0_iter4_reg;
        y_V_5_reg_1206 <= y_V_5_fu_920_p3;
        y_V_reg_1107 <= y_V_fu_522_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_res_0_V_reg_1152 <= exp_table1_q0;
        exp_res_1_V_reg_1158 <= exp_table1_q1;
        exp_res_2_V_reg_1164 <= exp_table1_q2;
        exp_res_3_V_reg_1170 <= exp_table1_q3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        exp_res_4_V_reg_1193 <= exp_table1_q4;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1)) | ((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to13 = 1'b1;
    end else begin
        ap_idle_pp0_0to13 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to13 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        exp_table1_ce4 = 1'b1;
    end else begin
        exp_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1025_ce = 1'b1;
    end else begin
        grp_fu_1025_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1031_ce = 1'b1;
    end else begin
        grp_fu_1031_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1037_ce = 1'b1;
    end else begin
        grp_fu_1037_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1043_ce = 1'b1;
    end else begin
        grp_fu_1043_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1049_ce = 1'b1;
    end else begin
        grp_fu_1049_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln786_1_fu_307_p2 = (xor_ln786_1_fu_301_p2 & tmp_5_fu_285_p3);

assign and_ln786_2_fu_362_p2 = (xor_ln786_2_fu_356_p2 & tmp_9_fu_340_p3);

assign and_ln786_3_fu_417_p2 = (xor_ln786_3_fu_411_p2 & tmp_11_fu_395_p3);

assign and_ln786_4_fu_472_p2 = (xor_ln786_4_fu_466_p2 & tmp_13_fu_450_p3);

assign and_ln786_fu_252_p2 = (xor_ln786_fu_246_p2 & tmp_1_fu_230_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = {{mul_ln1118_reg_1255[25:10]}};

assign ap_return_1 = {{mul_ln1118_1_reg_1260[25:10]}};

assign ap_return_2 = {{mul_ln1118_2_reg_1265[25:10]}};

assign ap_return_3 = {{mul_ln1118_3_reg_1270[25:10]}};

assign ap_return_4 = {{mul_ln1118_4_reg_1275[25:10]}};

assign exp_table1_address0 = zext_ln255_fu_666_p1;

assign exp_table1_address1 = zext_ln255_1_fu_670_p1;

assign exp_table1_address2 = zext_ln255_2_fu_674_p1;

assign exp_table1_address3 = zext_ln255_3_fu_678_p1;

assign exp_table1_address4 = zext_ln255_4_fu_682_p1;

assign grp_fu_1025_p0 = sext_ln1116_fu_932_p1;

assign grp_fu_1025_p1 = grp_fu_1025_p10;

assign grp_fu_1025_p10 = exp_res_0_V_reg_1152_pp0_iter10_reg;

assign grp_fu_1031_p0 = sext_ln1116_fu_932_p1;

assign grp_fu_1031_p1 = grp_fu_1031_p10;

assign grp_fu_1031_p10 = exp_res_1_V_reg_1158_pp0_iter10_reg;

assign grp_fu_1037_p0 = sext_ln1116_fu_932_p1;

assign grp_fu_1037_p1 = grp_fu_1037_p10;

assign grp_fu_1037_p10 = exp_res_2_V_reg_1164_pp0_iter10_reg;

assign grp_fu_1043_p0 = sext_ln1116_fu_932_p1;

assign grp_fu_1043_p1 = grp_fu_1043_p10;

assign grp_fu_1043_p10 = exp_res_3_V_reg_1170_pp0_iter10_reg;

assign grp_fu_1049_p0 = sext_ln1116_fu_932_p1;

assign grp_fu_1049_p1 = grp_fu_1049_p10;

assign grp_fu_1049_p10 = exp_res_4_V_reg_1193_pp0_iter10_reg;

assign icmp_ln1496_1_fu_178_p0 = data_2_V_read;

assign icmp_ln1496_1_fu_178_p1 = data_3_V_read;

assign icmp_ln1496_1_fu_178_p2 = (($signed(icmp_ln1496_1_fu_178_p0) < $signed(icmp_ln1496_1_fu_178_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_194_p2 = (($signed(select_ln66_fu_184_p3) < $signed(select_ln66_1_fu_189_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_208_p2 = (($signed(select_ln66_2_reg_1096) < $signed(data_4_V_read_1_reg_1055_pp0_iter1_reg)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_172_p0 = data_0_V_read;

assign icmp_ln1496_fu_172_p1 = data_1_V_read;

assign icmp_ln1496_fu_172_p2 = (($signed(icmp_ln1496_fu_172_p0) < $signed(icmp_ln1496_fu_172_p1)) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln265_fu_928_p1;

assign lhs_V_1_fu_831_p1 = p_Val2_16_reg_1200;

assign lhs_V_fu_742_p1 = p_Val2_12_reg_1181;

assign or_ln340_1_fu_325_p2 = (xor_ln340_1_fu_319_p2 | tmp_7_fu_293_p3);

assign or_ln340_2_fu_380_p2 = (xor_ln340_2_fu_374_p2 | tmp_10_fu_348_p3);

assign or_ln340_3_fu_435_p2 = (xor_ln340_3_fu_429_p2 | tmp_12_fu_403_p3);

assign or_ln340_4_fu_490_p2 = (xor_ln340_4_fu_484_p2 | tmp_14_fu_458_p3);

assign or_ln340_5_fu_798_p2 = (xor_ln340_11_fu_792_p2 | p_Result_16_fu_766_p3);

assign or_ln340_6_fu_888_p2 = (xor_ln340_13_fu_882_p2 | p_Result_18_fu_856_p3);

assign or_ln340_fu_270_p2 = (xor_ln340_fu_264_p2 | tmp_3_fu_238_p3);

assign p_Result_14_fu_726_p3 = p_Val2_11_fu_720_p2[32'd17];

assign p_Result_15_fu_754_p3 = ret_V_fu_748_p2[32'd18];

assign p_Result_16_fu_766_p3 = p_Val2_15_fu_762_p2[32'd17];

assign p_Result_17_fu_843_p3 = ret_V_1_fu_837_p2[32'd18];

assign p_Result_18_fu_856_p3 = p_Val2_19_fu_851_p2[32'd17];

assign p_Result_s_fu_698_p3 = p_Val2_8_fu_692_p2[32'd17];

assign p_Val2_10_fu_717_p1 = exp_res_3_V_reg_1170;

assign p_Val2_11_fu_720_p2 = (p_Val2_9_fu_714_p1 + p_Val2_10_fu_717_p1);

assign p_Val2_12_fu_706_p3 = ((p_Result_s_fu_698_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_8_fu_692_p2);

assign p_Val2_13_fu_734_p3 = ((p_Result_14_fu_726_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_11_fu_720_p2);

assign p_Val2_15_fu_762_p2 = ($signed(p_Val2_12_reg_1181) + $signed(p_Val2_13_reg_1187));

assign p_Val2_16_fu_820_p3 = ((or_ln340_5_fu_798_p2[0:0] === 1'b1) ? select_ln340_12_fu_804_p3 : select_ln388_5_fu_812_p3);

assign p_Val2_17_fu_828_p1 = exp_res_4_V_reg_1193;

assign p_Val2_19_fu_851_p2 = ($signed(p_Val2_17_fu_828_p1) + $signed(p_Val2_16_reg_1200));

assign p_Val2_6_fu_686_p1 = exp_res_0_V_reg_1152;

assign p_Val2_7_fu_689_p1 = exp_res_1_V_reg_1158;

assign p_Val2_8_fu_692_p2 = (p_Val2_6_fu_686_p1 + p_Val2_7_fu_689_p1);

assign p_Val2_9_fu_714_p1 = exp_res_2_V_reg_1164;

assign ret_V_1_fu_837_p2 = ($signed(lhs_V_1_fu_831_p1) + $signed(rhs_V_1_fu_834_p1));

assign ret_V_fu_748_p2 = ($signed(rhs_V_fu_745_p1) + $signed(lhs_V_fu_742_p1));

assign rhs_V_1_fu_834_p1 = exp_res_4_V_reg_1193;

assign rhs_V_fu_745_p1 = p_Val2_13_reg_1187;

assign select_ln340_12_fu_804_p3 = ((xor_ln340_10_fu_786_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_15_fu_762_p2);

assign select_ln340_14_fu_904_p3 = ((xor_ln340_12_fu_876_p2[0:0] === 1'b1) ? 10'd511 : tmp_s_fu_894_p4);

assign select_ln340_2_fu_540_p3 = ((xor_ln340_6_fu_313_p2[0:0] === 1'b1) ? 10'd511 : tmp_2_fu_530_p4);

assign select_ln340_4_fu_574_p3 = ((xor_ln340_7_fu_368_p2[0:0] === 1'b1) ? 10'd511 : tmp_4_fu_564_p4);

assign select_ln340_6_fu_608_p3 = ((xor_ln340_8_fu_423_p2[0:0] === 1'b1) ? 10'd511 : tmp_6_fu_598_p4);

assign select_ln340_8_fu_642_p3 = ((xor_ln340_9_fu_478_p2[0:0] === 1'b1) ? 10'd511 : tmp_8_fu_632_p4);

assign select_ln340_fu_506_p3 = ((xor_ln340_5_fu_258_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_496_p4);

assign select_ln388_1_fu_548_p3 = ((and_ln786_1_fu_307_p2[0:0] === 1'b1) ? 10'd512 : tmp_2_fu_530_p4);

assign select_ln388_2_fu_582_p3 = ((and_ln786_2_fu_362_p2[0:0] === 1'b1) ? 10'd512 : tmp_4_fu_564_p4);

assign select_ln388_3_fu_616_p3 = ((and_ln786_3_fu_417_p2[0:0] === 1'b1) ? 10'd512 : tmp_6_fu_598_p4);

assign select_ln388_4_fu_650_p3 = ((and_ln786_4_fu_472_p2[0:0] === 1'b1) ? 10'd512 : tmp_8_fu_632_p4);

assign select_ln388_5_fu_812_p3 = ((underflow_fu_780_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_15_fu_762_p2);

assign select_ln388_6_fu_912_p3 = ((underflow_1_fu_870_p2[0:0] === 1'b1) ? 10'd512 : tmp_s_fu_894_p4);

assign select_ln388_fu_514_p3 = ((and_ln786_fu_252_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_496_p4);

assign select_ln66_1_fu_189_p3 = ((icmp_ln1496_1_reg_1091[0:0] === 1'b1) ? data_3_V_read_1_reg_1062 : data_2_V_read_1_reg_1068);

assign select_ln66_2_fu_200_p3 = ((icmp_ln1496_2_fu_194_p2[0:0] === 1'b1) ? select_ln66_1_fu_189_p3 : select_ln66_fu_184_p3);

assign select_ln66_fu_184_p3 = ((icmp_ln1496_reg_1086[0:0] === 1'b1) ? data_1_V_read_1_reg_1074 : data_0_V_read_1_reg_1080);

assign sext_ln1116_fu_932_p1 = $signed(inv_exp_sum_V_reg_1216);

assign sext_ln703_1_fu_221_p1 = $signed(x_max_V_reg_1102);

assign sext_ln703_2_fu_276_p1 = data_1_V_read_1_reg_1074_pp0_iter2_reg;

assign sext_ln703_3_fu_331_p1 = data_2_V_read_1_reg_1068_pp0_iter2_reg;

assign sext_ln703_4_fu_386_p1 = data_3_V_read_1_reg_1062_pp0_iter2_reg;

assign sext_ln703_5_fu_441_p1 = data_4_V_read_1_reg_1055_pp0_iter2_reg;

assign sext_ln703_fu_218_p1 = data_0_V_read_1_reg_1080_pp0_iter2_reg;

assign sub_ln1193_1_fu_279_p2 = ($signed(sext_ln703_2_fu_276_p1) - $signed(sext_ln703_1_fu_221_p1));

assign sub_ln1193_2_fu_334_p2 = ($signed(sext_ln703_3_fu_331_p1) - $signed(sext_ln703_1_fu_221_p1));

assign sub_ln1193_3_fu_389_p2 = ($signed(sext_ln703_4_fu_386_p1) - $signed(sext_ln703_1_fu_221_p1));

assign sub_ln1193_4_fu_444_p2 = ($signed(sext_ln703_5_fu_441_p1) - $signed(sext_ln703_1_fu_221_p1));

assign sub_ln1193_fu_224_p2 = ($signed(sext_ln703_fu_218_p1) - $signed(sext_ln703_1_fu_221_p1));

assign tmp_10_fu_348_p3 = sub_ln1193_2_fu_334_p2[32'd15];

assign tmp_11_fu_395_p3 = sub_ln1193_3_fu_389_p2[32'd16];

assign tmp_12_fu_403_p3 = sub_ln1193_3_fu_389_p2[32'd15];

assign tmp_13_fu_450_p3 = sub_ln1193_4_fu_444_p2[32'd16];

assign tmp_14_fu_458_p3 = sub_ln1193_4_fu_444_p2[32'd15];

assign tmp_1_fu_230_p3 = sub_ln1193_fu_224_p2[32'd16];

assign tmp_2_fu_530_p4 = {{sub_ln1193_1_fu_279_p2[15:6]}};

assign tmp_3_fu_238_p3 = sub_ln1193_fu_224_p2[32'd15];

assign tmp_4_fu_564_p4 = {{sub_ln1193_2_fu_334_p2[15:6]}};

assign tmp_5_fu_285_p3 = sub_ln1193_1_fu_279_p2[32'd16];

assign tmp_6_fu_598_p4 = {{sub_ln1193_3_fu_389_p2[15:6]}};

assign tmp_7_fu_293_p3 = sub_ln1193_1_fu_279_p2[32'd15];

assign tmp_8_fu_632_p4 = {{sub_ln1193_4_fu_444_p2[15:6]}};

assign tmp_9_fu_340_p3 = sub_ln1193_2_fu_334_p2[32'd16];

assign tmp_fu_496_p4 = {{sub_ln1193_fu_224_p2[15:6]}};

assign tmp_s_fu_894_p4 = {{p_Val2_19_fu_851_p2[17:8]}};

assign underflow_1_fu_870_p2 = (xor_ln786_6_fu_864_p2 & p_Result_17_fu_843_p3);

assign underflow_fu_780_p2 = (xor_ln786_5_fu_774_p2 & p_Result_15_fu_754_p3);

assign x_max_V_fu_212_p3 = ((icmp_ln1496_3_fu_208_p2[0:0] === 1'b1) ? data_4_V_read_1_reg_1055_pp0_iter1_reg : select_ln66_2_reg_1096);

assign xor_ln340_10_fu_786_p2 = (p_Result_16_fu_766_p3 ^ p_Result_15_fu_754_p3);

assign xor_ln340_11_fu_792_p2 = (p_Result_15_fu_754_p3 ^ 1'd1);

assign xor_ln340_12_fu_876_p2 = (p_Result_18_fu_856_p3 ^ p_Result_17_fu_843_p3);

assign xor_ln340_13_fu_882_p2 = (p_Result_17_fu_843_p3 ^ 1'd1);

assign xor_ln340_1_fu_319_p2 = (tmp_5_fu_285_p3 ^ 1'd1);

assign xor_ln340_2_fu_374_p2 = (tmp_9_fu_340_p3 ^ 1'd1);

assign xor_ln340_3_fu_429_p2 = (tmp_11_fu_395_p3 ^ 1'd1);

assign xor_ln340_4_fu_484_p2 = (tmp_13_fu_450_p3 ^ 1'd1);

assign xor_ln340_5_fu_258_p2 = (tmp_3_fu_238_p3 ^ tmp_1_fu_230_p3);

assign xor_ln340_6_fu_313_p2 = (tmp_7_fu_293_p3 ^ tmp_5_fu_285_p3);

assign xor_ln340_7_fu_368_p2 = (tmp_9_fu_340_p3 ^ tmp_10_fu_348_p3);

assign xor_ln340_8_fu_423_p2 = (tmp_12_fu_403_p3 ^ tmp_11_fu_395_p3);

assign xor_ln340_9_fu_478_p2 = (tmp_14_fu_458_p3 ^ tmp_13_fu_450_p3);

assign xor_ln340_fu_264_p2 = (tmp_1_fu_230_p3 ^ 1'd1);

assign xor_ln786_1_fu_301_p2 = (tmp_7_fu_293_p3 ^ 1'd1);

assign xor_ln786_2_fu_356_p2 = (tmp_10_fu_348_p3 ^ 1'd1);

assign xor_ln786_3_fu_411_p2 = (tmp_12_fu_403_p3 ^ 1'd1);

assign xor_ln786_4_fu_466_p2 = (tmp_14_fu_458_p3 ^ 1'd1);

assign xor_ln786_5_fu_774_p2 = (p_Result_16_fu_766_p3 ^ 1'd1);

assign xor_ln786_6_fu_864_p2 = (p_Result_18_fu_856_p3 ^ 1'd1);

assign xor_ln786_fu_246_p2 = (tmp_3_fu_238_p3 ^ 1'd1);

assign y_V_1_fu_556_p3 = ((or_ln340_1_fu_325_p2[0:0] === 1'b1) ? select_ln340_2_fu_540_p3 : select_ln388_1_fu_548_p3);

assign y_V_2_fu_590_p3 = ((or_ln340_2_fu_380_p2[0:0] === 1'b1) ? select_ln340_4_fu_574_p3 : select_ln388_2_fu_582_p3);

assign y_V_3_fu_624_p3 = ((or_ln340_3_fu_435_p2[0:0] === 1'b1) ? select_ln340_6_fu_608_p3 : select_ln388_3_fu_616_p3);

assign y_V_4_fu_658_p3 = ((or_ln340_4_fu_490_p2[0:0] === 1'b1) ? select_ln340_8_fu_642_p3 : select_ln388_4_fu_650_p3);

assign y_V_5_fu_920_p3 = ((or_ln340_6_fu_888_p2[0:0] === 1'b1) ? select_ln340_14_fu_904_p3 : select_ln388_6_fu_912_p3);

assign y_V_fu_522_p3 = ((or_ln340_fu_270_p2[0:0] === 1'b1) ? select_ln340_fu_506_p3 : select_ln388_fu_514_p3);

assign zext_ln255_1_fu_670_p1 = y_V_1_reg_1112;

assign zext_ln255_2_fu_674_p1 = y_V_2_reg_1117;

assign zext_ln255_3_fu_678_p1 = y_V_3_reg_1122;

assign zext_ln255_4_fu_682_p1 = y_V_4_reg_1127_pp0_iter5_reg;

assign zext_ln255_fu_666_p1 = y_V_reg_1107;

assign zext_ln265_fu_928_p1 = y_V_5_reg_1206;

endmodule //softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s
