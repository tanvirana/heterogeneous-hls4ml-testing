// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        data_4_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [17:0] data_0_V_read;
input  [17:0] data_1_V_read;
input  [17:0] data_2_V_read;
input  [17:0] data_3_V_read;
input  [17:0] data_4_V_read;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [17:0] exp_table1_q0;
wire   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [17:0] exp_table1_q1;
wire   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [17:0] exp_table1_q2;
wire   [9:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [17:0] exp_table1_q3;
wire   [9:0] exp_table1_address4;
reg    exp_table1_ce4;
wire   [17:0] exp_table1_q4;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [17:0] invert_table2_q0;
reg  signed [17:0] data_4_V_read_1_reg_826;
reg  signed [17:0] data_4_V_read_1_reg_826_pp0_iter1_reg;
reg  signed [17:0] data_4_V_read_1_reg_826_pp0_iter2_reg;
reg  signed [17:0] data_3_V_read_1_reg_833;
reg  signed [17:0] data_3_V_read_1_reg_833_pp0_iter1_reg;
reg  signed [17:0] data_3_V_read_1_reg_833_pp0_iter2_reg;
reg  signed [17:0] data_2_V_read_1_reg_839;
reg  signed [17:0] data_2_V_read_1_reg_839_pp0_iter1_reg;
reg  signed [17:0] data_2_V_read_1_reg_839_pp0_iter2_reg;
reg  signed [17:0] data_1_V_read_1_reg_845;
reg  signed [17:0] data_1_V_read_1_reg_845_pp0_iter1_reg;
reg  signed [17:0] data_1_V_read_1_reg_845_pp0_iter2_reg;
reg  signed [17:0] data_0_V_read_1_reg_851;
reg  signed [17:0] data_0_V_read_1_reg_851_pp0_iter1_reg;
reg  signed [17:0] data_0_V_read_1_reg_851_pp0_iter2_reg;
wire   [0:0] icmp_ln1496_fu_158_p2;
reg   [0:0] icmp_ln1496_reg_857;
wire   [0:0] icmp_ln1496_1_fu_164_p2;
reg   [0:0] icmp_ln1496_1_reg_862;
wire   [17:0] select_ln66_2_fu_186_p3;
reg   [17:0] select_ln66_2_reg_867;
wire   [17:0] x_max_V_fu_198_p3;
reg   [17:0] x_max_V_reg_873;
wire   [9:0] y_V_fu_508_p3;
reg   [9:0] y_V_reg_878;
wire   [9:0] y_V_1_fu_542_p3;
reg   [9:0] y_V_1_reg_883;
wire   [9:0] y_V_2_fu_576_p3;
reg   [9:0] y_V_2_reg_888;
wire   [9:0] y_V_3_fu_610_p3;
reg   [9:0] y_V_3_reg_893;
reg   [9:0] y_V_3_reg_893_pp0_iter4_reg;
wire   [9:0] y_V_4_fu_644_p3;
reg   [9:0] y_V_4_reg_898;
reg  signed [17:0] exp_res_0_V_reg_923;
reg  signed [17:0] exp_res_0_V_reg_923_pp0_iter6_reg;
reg  signed [17:0] exp_res_0_V_reg_923_pp0_iter7_reg;
reg  signed [17:0] exp_res_0_V_reg_923_pp0_iter8_reg;
reg  signed [17:0] exp_res_0_V_reg_923_pp0_iter9_reg;
reg  signed [17:0] exp_res_1_V_reg_929;
reg  signed [17:0] exp_res_1_V_reg_929_pp0_iter6_reg;
reg  signed [17:0] exp_res_1_V_reg_929_pp0_iter7_reg;
reg  signed [17:0] exp_res_1_V_reg_929_pp0_iter8_reg;
reg  signed [17:0] exp_res_1_V_reg_929_pp0_iter9_reg;
reg  signed [17:0] exp_res_2_V_reg_935;
reg  signed [17:0] exp_res_2_V_reg_935_pp0_iter6_reg;
reg  signed [17:0] exp_res_2_V_reg_935_pp0_iter7_reg;
reg  signed [17:0] exp_res_2_V_reg_935_pp0_iter8_reg;
reg  signed [17:0] exp_res_2_V_reg_935_pp0_iter9_reg;
reg  signed [17:0] exp_res_4_V_reg_946;
reg  signed [17:0] exp_res_4_V_reg_946_pp0_iter6_reg;
reg  signed [17:0] exp_res_4_V_reg_946_pp0_iter7_reg;
reg  signed [17:0] exp_res_4_V_reg_946_pp0_iter8_reg;
reg  signed [17:0] exp_res_4_V_reg_946_pp0_iter9_reg;
reg  signed [17:0] exp_res_3_V_reg_952;
reg  signed [17:0] exp_res_3_V_reg_952_pp0_iter7_reg;
reg  signed [17:0] exp_res_3_V_reg_952_pp0_iter8_reg;
reg  signed [17:0] exp_res_3_V_reg_952_pp0_iter9_reg;
wire   [17:0] add_ln703_fu_672_p2;
reg   [17:0] add_ln703_reg_958;
wire   [17:0] add_ln703_1_fu_676_p2;
reg   [17:0] add_ln703_1_reg_963;
reg   [9:0] y_V_5_reg_968;
reg   [17:0] inv_exp_sum_V_reg_978;
wire  signed [29:0] sext_ln1116_fu_703_p1;
wire  signed [29:0] grp_fu_796_p2;
reg  signed [29:0] mul_ln1118_reg_1017;
wire  signed [29:0] grp_fu_802_p2;
reg  signed [29:0] mul_ln1118_1_reg_1022;
wire  signed [29:0] grp_fu_808_p2;
reg  signed [29:0] mul_ln1118_2_reg_1027;
wire  signed [29:0] grp_fu_814_p2;
reg  signed [29:0] mul_ln1118_3_reg_1032;
wire  signed [29:0] grp_fu_820_p2;
reg  signed [29:0] mul_ln1118_4_reg_1037;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln255_fu_652_p1;
wire   [63:0] zext_ln255_1_fu_656_p1;
wire   [63:0] zext_ln255_2_fu_660_p1;
wire   [63:0] zext_ln255_4_fu_664_p1;
wire   [63:0] zext_ln255_3_fu_668_p1;
wire   [63:0] zext_ln265_fu_699_p1;
wire  signed [17:0] icmp_ln1496_fu_158_p0;
wire  signed [17:0] icmp_ln1496_fu_158_p1;
wire  signed [17:0] icmp_ln1496_1_fu_164_p0;
wire  signed [17:0] icmp_ln1496_1_fu_164_p1;
wire   [17:0] select_ln66_fu_170_p3;
wire   [17:0] select_ln66_1_fu_175_p3;
wire   [0:0] icmp_ln1496_2_fu_180_p2;
wire   [0:0] icmp_ln1496_3_fu_194_p2;
wire  signed [18:0] sext_ln703_fu_204_p1;
wire  signed [18:0] sext_ln703_1_fu_207_p1;
wire   [18:0] sub_ln1193_fu_210_p2;
wire   [0:0] tmp_2_fu_224_p3;
wire   [0:0] tmp_fu_216_p3;
wire   [0:0] xor_ln786_fu_232_p2;
wire   [0:0] xor_ln340_fu_250_p2;
wire  signed [18:0] sext_ln703_2_fu_262_p1;
wire   [18:0] sub_ln1193_1_fu_265_p2;
wire   [0:0] tmp_6_fu_279_p3;
wire   [0:0] tmp_4_fu_271_p3;
wire   [0:0] xor_ln786_1_fu_287_p2;
wire   [0:0] xor_ln340_1_fu_305_p2;
wire  signed [18:0] sext_ln703_3_fu_317_p1;
wire   [18:0] sub_ln1193_2_fu_320_p2;
wire   [0:0] tmp_10_fu_334_p3;
wire   [0:0] tmp_8_fu_326_p3;
wire   [0:0] xor_ln786_2_fu_342_p2;
wire   [0:0] xor_ln340_2_fu_360_p2;
wire  signed [18:0] sext_ln703_4_fu_372_p1;
wire   [18:0] sub_ln1193_3_fu_375_p2;
wire   [0:0] tmp_12_fu_389_p3;
wire   [0:0] tmp_11_fu_381_p3;
wire   [0:0] xor_ln786_3_fu_397_p2;
wire   [0:0] xor_ln340_3_fu_415_p2;
wire  signed [18:0] sext_ln703_5_fu_427_p1;
wire   [18:0] sub_ln1193_4_fu_430_p2;
wire   [0:0] tmp_14_fu_444_p3;
wire   [0:0] tmp_13_fu_436_p3;
wire   [0:0] xor_ln786_4_fu_452_p2;
wire   [0:0] xor_ln340_4_fu_470_p2;
wire   [0:0] xor_ln340_5_fu_244_p2;
wire   [9:0] tmp_1_fu_482_p4;
wire   [0:0] and_ln786_fu_238_p2;
wire   [0:0] or_ln340_fu_256_p2;
wire   [9:0] select_ln340_fu_492_p3;
wire   [9:0] select_ln388_fu_500_p3;
wire   [0:0] xor_ln340_6_fu_299_p2;
wire   [9:0] tmp_3_fu_516_p4;
wire   [0:0] and_ln786_1_fu_293_p2;
wire   [0:0] or_ln340_1_fu_311_p2;
wire   [9:0] select_ln340_2_fu_526_p3;
wire   [9:0] select_ln388_1_fu_534_p3;
wire   [0:0] xor_ln340_7_fu_354_p2;
wire   [9:0] tmp_5_fu_550_p4;
wire   [0:0] and_ln786_2_fu_348_p2;
wire   [0:0] or_ln340_2_fu_366_p2;
wire   [9:0] select_ln340_4_fu_560_p3;
wire   [9:0] select_ln388_2_fu_568_p3;
wire   [0:0] xor_ln340_8_fu_409_p2;
wire   [9:0] tmp_7_fu_584_p4;
wire   [0:0] and_ln786_3_fu_403_p2;
wire   [0:0] or_ln340_3_fu_421_p2;
wire   [9:0] select_ln340_6_fu_594_p3;
wire   [9:0] select_ln388_3_fu_602_p3;
wire   [0:0] xor_ln340_9_fu_464_p2;
wire   [9:0] tmp_9_fu_618_p4;
wire   [0:0] and_ln786_4_fu_458_p2;
wire   [0:0] or_ln340_4_fu_476_p2;
wire   [9:0] select_ln340_8_fu_628_p3;
wire   [9:0] select_ln388_4_fu_636_p3;
wire   [17:0] add_ln703_2_fu_680_p2;
wire   [17:0] exp_sum_V_fu_684_p2;
wire  signed [17:0] grp_fu_796_p1;
wire  signed [17:0] grp_fu_802_p1;
wire  signed [17:0] grp_fu_808_p1;
wire  signed [17:0] grp_fu_814_p1;
wire  signed [17:0] grp_fu_820_p1;
reg    grp_fu_796_ce;
reg    grp_fu_802_ce;
reg    grp_fu_808_ce;
reg    grp_fu_814_ce;
reg    grp_fu_820_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to12;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
end

softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table1 #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3),
    .address4(exp_table1_address4),
    .ce4(exp_table1_ce4),
    .q4(exp_table1_q4)
);

softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_invert_table2 #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

myproject_mul_mul_18s_18s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
myproject_mul_mul_18s_18s_30_3_1_U266(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(exp_res_0_V_reg_923_pp0_iter9_reg),
    .din1(grp_fu_796_p1),
    .ce(grp_fu_796_ce),
    .dout(grp_fu_796_p2)
);

myproject_mul_mul_18s_18s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
myproject_mul_mul_18s_18s_30_3_1_U267(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(exp_res_1_V_reg_929_pp0_iter9_reg),
    .din1(grp_fu_802_p1),
    .ce(grp_fu_802_ce),
    .dout(grp_fu_802_p2)
);

myproject_mul_mul_18s_18s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
myproject_mul_mul_18s_18s_30_3_1_U268(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(exp_res_2_V_reg_935_pp0_iter9_reg),
    .din1(grp_fu_808_p1),
    .ce(grp_fu_808_ce),
    .dout(grp_fu_808_p2)
);

myproject_mul_mul_18s_18s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
myproject_mul_mul_18s_18s_30_3_1_U269(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(exp_res_3_V_reg_952_pp0_iter9_reg),
    .din1(grp_fu_814_p1),
    .ce(grp_fu_814_ce),
    .dout(grp_fu_814_p2)
);

myproject_mul_mul_18s_18s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
myproject_mul_mul_18s_18s_30_3_1_U270(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(exp_res_4_V_reg_946_pp0_iter9_reg),
    .din1(grp_fu_820_p1),
    .ce(grp_fu_820_ce),
    .dout(grp_fu_820_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln703_1_reg_963 <= add_ln703_1_fu_676_p2;
        add_ln703_reg_958 <= add_ln703_fu_672_p2;
        data_0_V_read_1_reg_851_pp0_iter2_reg <= data_0_V_read_1_reg_851_pp0_iter1_reg;
        data_1_V_read_1_reg_845_pp0_iter2_reg <= data_1_V_read_1_reg_845_pp0_iter1_reg;
        data_2_V_read_1_reg_839_pp0_iter2_reg <= data_2_V_read_1_reg_839_pp0_iter1_reg;
        data_3_V_read_1_reg_833_pp0_iter2_reg <= data_3_V_read_1_reg_833_pp0_iter1_reg;
        data_4_V_read_1_reg_826_pp0_iter2_reg <= data_4_V_read_1_reg_826_pp0_iter1_reg;
        exp_res_0_V_reg_923_pp0_iter6_reg <= exp_res_0_V_reg_923;
        exp_res_0_V_reg_923_pp0_iter7_reg <= exp_res_0_V_reg_923_pp0_iter6_reg;
        exp_res_0_V_reg_923_pp0_iter8_reg <= exp_res_0_V_reg_923_pp0_iter7_reg;
        exp_res_0_V_reg_923_pp0_iter9_reg <= exp_res_0_V_reg_923_pp0_iter8_reg;
        exp_res_1_V_reg_929_pp0_iter6_reg <= exp_res_1_V_reg_929;
        exp_res_1_V_reg_929_pp0_iter7_reg <= exp_res_1_V_reg_929_pp0_iter6_reg;
        exp_res_1_V_reg_929_pp0_iter8_reg <= exp_res_1_V_reg_929_pp0_iter7_reg;
        exp_res_1_V_reg_929_pp0_iter9_reg <= exp_res_1_V_reg_929_pp0_iter8_reg;
        exp_res_2_V_reg_935_pp0_iter6_reg <= exp_res_2_V_reg_935;
        exp_res_2_V_reg_935_pp0_iter7_reg <= exp_res_2_V_reg_935_pp0_iter6_reg;
        exp_res_2_V_reg_935_pp0_iter8_reg <= exp_res_2_V_reg_935_pp0_iter7_reg;
        exp_res_2_V_reg_935_pp0_iter9_reg <= exp_res_2_V_reg_935_pp0_iter8_reg;
        exp_res_3_V_reg_952_pp0_iter7_reg <= exp_res_3_V_reg_952;
        exp_res_3_V_reg_952_pp0_iter8_reg <= exp_res_3_V_reg_952_pp0_iter7_reg;
        exp_res_3_V_reg_952_pp0_iter9_reg <= exp_res_3_V_reg_952_pp0_iter8_reg;
        exp_res_4_V_reg_946_pp0_iter6_reg <= exp_res_4_V_reg_946;
        exp_res_4_V_reg_946_pp0_iter7_reg <= exp_res_4_V_reg_946_pp0_iter6_reg;
        exp_res_4_V_reg_946_pp0_iter8_reg <= exp_res_4_V_reg_946_pp0_iter7_reg;
        exp_res_4_V_reg_946_pp0_iter9_reg <= exp_res_4_V_reg_946_pp0_iter8_reg;
        inv_exp_sum_V_reg_978 <= invert_table2_q0;
        mul_ln1118_1_reg_1022 <= grp_fu_802_p2;
        mul_ln1118_2_reg_1027 <= grp_fu_808_p2;
        mul_ln1118_3_reg_1032 <= grp_fu_814_p2;
        mul_ln1118_4_reg_1037 <= grp_fu_820_p2;
        mul_ln1118_reg_1017 <= grp_fu_796_p2;
        x_max_V_reg_873 <= x_max_V_fu_198_p3;
        y_V_1_reg_883 <= y_V_1_fu_542_p3;
        y_V_2_reg_888 <= y_V_2_fu_576_p3;
        y_V_3_reg_893 <= y_V_3_fu_610_p3;
        y_V_3_reg_893_pp0_iter4_reg <= y_V_3_reg_893;
        y_V_4_reg_898 <= y_V_4_fu_644_p3;
        y_V_5_reg_968 <= {{exp_sum_V_fu_684_p2[17:8]}};
        y_V_reg_878 <= y_V_fu_508_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_0_V_read_1_reg_851 <= data_0_V_read;
        data_0_V_read_1_reg_851_pp0_iter1_reg <= data_0_V_read_1_reg_851;
        data_1_V_read_1_reg_845 <= data_1_V_read;
        data_1_V_read_1_reg_845_pp0_iter1_reg <= data_1_V_read_1_reg_845;
        data_2_V_read_1_reg_839 <= data_2_V_read;
        data_2_V_read_1_reg_839_pp0_iter1_reg <= data_2_V_read_1_reg_839;
        data_3_V_read_1_reg_833 <= data_3_V_read;
        data_3_V_read_1_reg_833_pp0_iter1_reg <= data_3_V_read_1_reg_833;
        data_4_V_read_1_reg_826 <= data_4_V_read;
        data_4_V_read_1_reg_826_pp0_iter1_reg <= data_4_V_read_1_reg_826;
        icmp_ln1496_1_reg_862 <= icmp_ln1496_1_fu_164_p2;
        icmp_ln1496_reg_857 <= icmp_ln1496_fu_158_p2;
        select_ln66_2_reg_867 <= select_ln66_2_fu_186_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_res_0_V_reg_923 <= exp_table1_q0;
        exp_res_1_V_reg_929 <= exp_table1_q1;
        exp_res_2_V_reg_935 <= exp_table1_q2;
        exp_res_4_V_reg_946 <= exp_table1_q3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        exp_res_3_V_reg_952 <= exp_table1_q4;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter13 == 1'b1)) | ((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to12 = 1'b1;
    end else begin
        ap_idle_pp0_0to12 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to12 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table1_ce4 = 1'b1;
    end else begin
        exp_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_796_ce = 1'b1;
    end else begin
        grp_fu_796_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_802_ce = 1'b1;
    end else begin
        grp_fu_802_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_808_ce = 1'b1;
    end else begin
        grp_fu_808_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_814_ce = 1'b1;
    end else begin
        grp_fu_814_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_820_ce = 1'b1;
    end else begin
        grp_fu_820_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_1_fu_676_p2 = ($signed(exp_res_4_V_reg_946) + $signed(exp_res_2_V_reg_935));

assign add_ln703_2_fu_680_p2 = ($signed(exp_res_3_V_reg_952) + $signed(add_ln703_1_reg_963));

assign add_ln703_fu_672_p2 = ($signed(exp_res_1_V_reg_929) + $signed(exp_res_0_V_reg_923));

assign and_ln786_1_fu_293_p2 = (xor_ln786_1_fu_287_p2 & tmp_4_fu_271_p3);

assign and_ln786_2_fu_348_p2 = (xor_ln786_2_fu_342_p2 & tmp_8_fu_326_p3);

assign and_ln786_3_fu_403_p2 = (xor_ln786_3_fu_397_p2 & tmp_11_fu_381_p3);

assign and_ln786_4_fu_458_p2 = (xor_ln786_4_fu_452_p2 & tmp_13_fu_436_p3);

assign and_ln786_fu_238_p2 = (xor_ln786_fu_232_p2 & tmp_fu_216_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = {{mul_ln1118_reg_1017[29:14]}};

assign ap_return_1 = {{mul_ln1118_1_reg_1022[29:14]}};

assign ap_return_2 = {{mul_ln1118_2_reg_1027[29:14]}};

assign ap_return_3 = {{mul_ln1118_3_reg_1032[29:14]}};

assign ap_return_4 = {{mul_ln1118_4_reg_1037[29:14]}};

assign exp_sum_V_fu_684_p2 = (add_ln703_reg_958 + add_ln703_2_fu_680_p2);

assign exp_table1_address0 = zext_ln255_fu_652_p1;

assign exp_table1_address1 = zext_ln255_1_fu_656_p1;

assign exp_table1_address2 = zext_ln255_2_fu_660_p1;

assign exp_table1_address3 = zext_ln255_4_fu_664_p1;

assign exp_table1_address4 = zext_ln255_3_fu_668_p1;

assign grp_fu_796_p1 = sext_ln1116_fu_703_p1;

assign grp_fu_802_p1 = sext_ln1116_fu_703_p1;

assign grp_fu_808_p1 = sext_ln1116_fu_703_p1;

assign grp_fu_814_p1 = sext_ln1116_fu_703_p1;

assign grp_fu_820_p1 = sext_ln1116_fu_703_p1;

assign icmp_ln1496_1_fu_164_p0 = data_2_V_read;

assign icmp_ln1496_1_fu_164_p1 = data_3_V_read;

assign icmp_ln1496_1_fu_164_p2 = (($signed(icmp_ln1496_1_fu_164_p0) < $signed(icmp_ln1496_1_fu_164_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_180_p2 = (($signed(select_ln66_fu_170_p3) < $signed(select_ln66_1_fu_175_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_194_p2 = (($signed(select_ln66_2_reg_867) < $signed(data_4_V_read_1_reg_826_pp0_iter1_reg)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_158_p0 = data_0_V_read;

assign icmp_ln1496_fu_158_p1 = data_1_V_read;

assign icmp_ln1496_fu_158_p2 = (($signed(icmp_ln1496_fu_158_p0) < $signed(icmp_ln1496_fu_158_p1)) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln265_fu_699_p1;

assign or_ln340_1_fu_311_p2 = (xor_ln340_1_fu_305_p2 | tmp_6_fu_279_p3);

assign or_ln340_2_fu_366_p2 = (xor_ln340_2_fu_360_p2 | tmp_10_fu_334_p3);

assign or_ln340_3_fu_421_p2 = (xor_ln340_3_fu_415_p2 | tmp_12_fu_389_p3);

assign or_ln340_4_fu_476_p2 = (xor_ln340_4_fu_470_p2 | tmp_14_fu_444_p3);

assign or_ln340_fu_256_p2 = (xor_ln340_fu_250_p2 | tmp_2_fu_224_p3);

assign select_ln340_2_fu_526_p3 = ((xor_ln340_6_fu_299_p2[0:0] === 1'b1) ? 10'd511 : tmp_3_fu_516_p4);

assign select_ln340_4_fu_560_p3 = ((xor_ln340_7_fu_354_p2[0:0] === 1'b1) ? 10'd511 : tmp_5_fu_550_p4);

assign select_ln340_6_fu_594_p3 = ((xor_ln340_8_fu_409_p2[0:0] === 1'b1) ? 10'd511 : tmp_7_fu_584_p4);

assign select_ln340_8_fu_628_p3 = ((xor_ln340_9_fu_464_p2[0:0] === 1'b1) ? 10'd511 : tmp_9_fu_618_p4);

assign select_ln340_fu_492_p3 = ((xor_ln340_5_fu_244_p2[0:0] === 1'b1) ? 10'd511 : tmp_1_fu_482_p4);

assign select_ln388_1_fu_534_p3 = ((and_ln786_1_fu_293_p2[0:0] === 1'b1) ? 10'd512 : tmp_3_fu_516_p4);

assign select_ln388_2_fu_568_p3 = ((and_ln786_2_fu_348_p2[0:0] === 1'b1) ? 10'd512 : tmp_5_fu_550_p4);

assign select_ln388_3_fu_602_p3 = ((and_ln786_3_fu_403_p2[0:0] === 1'b1) ? 10'd512 : tmp_7_fu_584_p4);

assign select_ln388_4_fu_636_p3 = ((and_ln786_4_fu_458_p2[0:0] === 1'b1) ? 10'd512 : tmp_9_fu_618_p4);

assign select_ln388_fu_500_p3 = ((and_ln786_fu_238_p2[0:0] === 1'b1) ? 10'd512 : tmp_1_fu_482_p4);

assign select_ln66_1_fu_175_p3 = ((icmp_ln1496_1_reg_862[0:0] === 1'b1) ? data_3_V_read_1_reg_833 : data_2_V_read_1_reg_839);

assign select_ln66_2_fu_186_p3 = ((icmp_ln1496_2_fu_180_p2[0:0] === 1'b1) ? select_ln66_1_fu_175_p3 : select_ln66_fu_170_p3);

assign select_ln66_fu_170_p3 = ((icmp_ln1496_reg_857[0:0] === 1'b1) ? data_1_V_read_1_reg_845 : data_0_V_read_1_reg_851);

assign sext_ln1116_fu_703_p1 = $signed(inv_exp_sum_V_reg_978);

assign sext_ln703_1_fu_207_p1 = $signed(x_max_V_reg_873);

assign sext_ln703_2_fu_262_p1 = data_1_V_read_1_reg_845_pp0_iter2_reg;

assign sext_ln703_3_fu_317_p1 = data_2_V_read_1_reg_839_pp0_iter2_reg;

assign sext_ln703_4_fu_372_p1 = data_3_V_read_1_reg_833_pp0_iter2_reg;

assign sext_ln703_5_fu_427_p1 = data_4_V_read_1_reg_826_pp0_iter2_reg;

assign sext_ln703_fu_204_p1 = data_0_V_read_1_reg_851_pp0_iter2_reg;

assign sub_ln1193_1_fu_265_p2 = ($signed(sext_ln703_2_fu_262_p1) - $signed(sext_ln703_1_fu_207_p1));

assign sub_ln1193_2_fu_320_p2 = ($signed(sext_ln703_3_fu_317_p1) - $signed(sext_ln703_1_fu_207_p1));

assign sub_ln1193_3_fu_375_p2 = ($signed(sext_ln703_4_fu_372_p1) - $signed(sext_ln703_1_fu_207_p1));

assign sub_ln1193_4_fu_430_p2 = ($signed(sext_ln703_5_fu_427_p1) - $signed(sext_ln703_1_fu_207_p1));

assign sub_ln1193_fu_210_p2 = ($signed(sext_ln703_fu_204_p1) - $signed(sext_ln703_1_fu_207_p1));

assign tmp_10_fu_334_p3 = sub_ln1193_2_fu_320_p2[32'd17];

assign tmp_11_fu_381_p3 = sub_ln1193_3_fu_375_p2[32'd18];

assign tmp_12_fu_389_p3 = sub_ln1193_3_fu_375_p2[32'd17];

assign tmp_13_fu_436_p3 = sub_ln1193_4_fu_430_p2[32'd18];

assign tmp_14_fu_444_p3 = sub_ln1193_4_fu_430_p2[32'd17];

assign tmp_1_fu_482_p4 = {{sub_ln1193_fu_210_p2[17:8]}};

assign tmp_2_fu_224_p3 = sub_ln1193_fu_210_p2[32'd17];

assign tmp_3_fu_516_p4 = {{sub_ln1193_1_fu_265_p2[17:8]}};

assign tmp_4_fu_271_p3 = sub_ln1193_1_fu_265_p2[32'd18];

assign tmp_5_fu_550_p4 = {{sub_ln1193_2_fu_320_p2[17:8]}};

assign tmp_6_fu_279_p3 = sub_ln1193_1_fu_265_p2[32'd17];

assign tmp_7_fu_584_p4 = {{sub_ln1193_3_fu_375_p2[17:8]}};

assign tmp_8_fu_326_p3 = sub_ln1193_2_fu_320_p2[32'd18];

assign tmp_9_fu_618_p4 = {{sub_ln1193_4_fu_430_p2[17:8]}};

assign tmp_fu_216_p3 = sub_ln1193_fu_210_p2[32'd18];

assign x_max_V_fu_198_p3 = ((icmp_ln1496_3_fu_194_p2[0:0] === 1'b1) ? data_4_V_read_1_reg_826_pp0_iter1_reg : select_ln66_2_reg_867);

assign xor_ln340_1_fu_305_p2 = (tmp_4_fu_271_p3 ^ 1'd1);

assign xor_ln340_2_fu_360_p2 = (tmp_8_fu_326_p3 ^ 1'd1);

assign xor_ln340_3_fu_415_p2 = (tmp_11_fu_381_p3 ^ 1'd1);

assign xor_ln340_4_fu_470_p2 = (tmp_13_fu_436_p3 ^ 1'd1);

assign xor_ln340_5_fu_244_p2 = (tmp_fu_216_p3 ^ tmp_2_fu_224_p3);

assign xor_ln340_6_fu_299_p2 = (tmp_6_fu_279_p3 ^ tmp_4_fu_271_p3);

assign xor_ln340_7_fu_354_p2 = (tmp_8_fu_326_p3 ^ tmp_10_fu_334_p3);

assign xor_ln340_8_fu_409_p2 = (tmp_12_fu_389_p3 ^ tmp_11_fu_381_p3);

assign xor_ln340_9_fu_464_p2 = (tmp_14_fu_444_p3 ^ tmp_13_fu_436_p3);

assign xor_ln340_fu_250_p2 = (tmp_fu_216_p3 ^ 1'd1);

assign xor_ln786_1_fu_287_p2 = (tmp_6_fu_279_p3 ^ 1'd1);

assign xor_ln786_2_fu_342_p2 = (tmp_10_fu_334_p3 ^ 1'd1);

assign xor_ln786_3_fu_397_p2 = (tmp_12_fu_389_p3 ^ 1'd1);

assign xor_ln786_4_fu_452_p2 = (tmp_14_fu_444_p3 ^ 1'd1);

assign xor_ln786_fu_232_p2 = (tmp_2_fu_224_p3 ^ 1'd1);

assign y_V_1_fu_542_p3 = ((or_ln340_1_fu_311_p2[0:0] === 1'b1) ? select_ln340_2_fu_526_p3 : select_ln388_1_fu_534_p3);

assign y_V_2_fu_576_p3 = ((or_ln340_2_fu_366_p2[0:0] === 1'b1) ? select_ln340_4_fu_560_p3 : select_ln388_2_fu_568_p3);

assign y_V_3_fu_610_p3 = ((or_ln340_3_fu_421_p2[0:0] === 1'b1) ? select_ln340_6_fu_594_p3 : select_ln388_3_fu_602_p3);

assign y_V_4_fu_644_p3 = ((or_ln340_4_fu_476_p2[0:0] === 1'b1) ? select_ln340_8_fu_628_p3 : select_ln388_4_fu_636_p3);

assign y_V_fu_508_p3 = ((or_ln340_fu_256_p2[0:0] === 1'b1) ? select_ln340_fu_492_p3 : select_ln388_fu_500_p3);

assign zext_ln255_1_fu_656_p1 = y_V_1_reg_883;

assign zext_ln255_2_fu_660_p1 = y_V_2_reg_888;

assign zext_ln255_3_fu_668_p1 = y_V_3_reg_893_pp0_iter4_reg;

assign zext_ln255_4_fu_664_p1 = y_V_4_reg_898;

assign zext_ln255_fu_652_p1 = y_V_reg_878;

assign zext_ln265_fu_699_p1 = y_V_5_reg_968;

endmodule //softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s
