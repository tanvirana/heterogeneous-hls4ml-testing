-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table1_rom is 
    generic(
             DWIDTH     : integer := 18; 
             AWIDTH     : integer := 10; 
             MEM_SIZE    : integer := 1024
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          addr2      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce2       : in std_logic; 
          q2         : out std_logic_vector(DWIDTH-1 downto 0);
          addr3      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce3       : in std_logic; 
          q3         : out std_logic_vector(DWIDTH-1 downto 0);
          addr4      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce4       : in std_logic; 
          q4         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr2_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr3_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr4_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem0 : mem_array := (
    0 => "000000010000000000", 1 => "000000010010001000", 
    2 => "000000010100100010", 3 => "000000010111010001", 
    4 => "000000011010011000", 5 => "000000011101111001", 
    6 => "000000100001110111", 7 => "000000100110011000", 
    8 => "000000101011011111", 9 => "000000110001010010", 
    10 => "000000110111110110", 11 => "000000111111010001", 
    12 => "000001000111101101", 13 => "000001010001010000", 
    14 => "000001011100000100", 15 => "000001101000010101", 
    16 => "000001110110001110", 17 => "000010000101111101", 
    18 => "000010010111110011", 19 => "000010101100000001", 
    20 => "000011000010111010", 21 => "000011011100110111", 
    22 => "000011111010010010", 23 => "000100011011100110", 
    24 => "000101000001010111", 25 => "000101101100001010", 
    26 => "000110011100101001", 27 => "000111010011100101", 
    28 => "001000010001110110", 29 => "001001011000011001", 
    30 => "001010101000010101", 31 => "001100000010111011", 
    32 => "001101101001100100", 33 => "001111011101111000", 
    34 => "010001100001101011", 35 => "010011110111000010", 
    36 => "010110100000010001", 37 => "011001100000000010", 
    38 => "011100111001010110", 39 => "100000101111100101", 
    40 => "100101000110100111", 41 => "101010000010110010", 
    42 => "101111101001000011", 43 => "110101111111000010", 
    44 => "111101001011000100", 45 => "000101010100010110", 
    46 => "001110100011000011", 47 => "011001000000011001", 
    48 => "100100110110110111", 49 => "110010010010010100", 
    50 => "000001100000001101", 51 => "010010101111110001", 
    52 => "100110010010010001", 53 => "111100011011010001", 
    54 => "010101100000111100", 55 => "110001111100011010", 
    56 => "010010001010001000", 57 => "110110101010010111", 
    58 => "100000000001101011", 59 => "001110111001011110", 
    60 => "000100000000101011", 61 => "000000001100011111", 
    62 => "000100011001001010", 63 => "010001101010111110", 
    64 => "101001001111010101", 65 => "001100011101111000", 
    66 => "111100111010000000", 67 => "111100010100010010", 
    68 => "001100101100010011", 69 => "110000010010100110", 
    70 => "101001101011000000", 71 => "111011101111001001", 
    72 => "101001110001010110", 73 => "110111011111111101", 
    74 => "101001001001000011", 75 => "000011011110101100", 
    76 => "001011111011101000", 77 => "001000101000110111", 
    78 => "000000100011101010", 79 => "111011100100100110", 
    80 => "000010100111011100", 81 => "011111110100000110", 
    82 => "011110101000101010", 83 => "001100000101000110", 
    84 => "110110111000000100", 85 => "101111101101101100", 
    86 => "001001100000011100", 87 => "011001101011111100", 
    88 => "111000100010010000", 89 => "000001100100101000", 
    90 => "010011111110110000", 91 => "010011000101110000", 
    92 => "100110111100011000", 93 => "111100111010000000", 
    94 => "001000011001000000", 95 => "000011101001100000", 
    96 => "110000101100110000", 97 => "011010010101100000", 
    98 => "010101010100100000", 99 => "000001101101010000", 
    100 => "001100010100100000", 101 => "110000011111100000", 
    102 => "111001111110100000", 103 => "000111000111000000", 
    104 => "001011010110100000", 105 => "010010000001000000", 
    106 => "000001100001000000", 107 => "011110111011000000", 
    108 => "010010000110000000", 109 => "101010010000000000", 
    110 => "100011010011000000", 111 => "101011101000000000", 
    112 => "101011000100000000", 113 => "001010010010000000", 
    114 => "111011101000000000", 115 => "000100101110000000", 
    116 => "001001110100000000", 117 => "011010001000000000", 
    118 => "111110010100000000", 119 => "001000011100000000", 
    120 => "100110010100000000", 121 => "110110100000000000", 
    122 => "011111011000000000", 123 => "101010000000000000", 
    124 => "100000101000000000", 125 => "110000001000000000", 
    126 => "001111100000000000", 127 => "101011010000000000", 
    128 => "010111110000000000", 129 => "001000100000000000", 
    130 => "010010000000000000", 131 => "101111110000000000", 
    132 => "010111110000000000", 133 => "011000000000000000", 
    134 => "111110000000000000", 135 => "001111100000000000", 
    136 => "010010000000000000", 137 => "100011000000000000", 
    138 => "100101100000000000", 139 => "001000000000000000", 
    140 => "100100000000000000", 141 => "111000000000000000", 
    142 => "001001000000000000", 143 => "100100000000000000", 
    144 => "010000000000000000", 145 => "110000000000000000", 
    146 => "010100000000000000", 147 => "011000000000000000", 
    148 => "000010000000000000", 149 => "101010000000000000", 
    150 => "001100000000000000", 151 => "110000000000000000", 
    152 => "100000000000000000", 153 => "001000000000000000", 
    154 => "000000000000000000", 155 => "111000000000000000", 
    156 => "101000000000000000", 157 => "100000000000000000", 
    158 => "000000000000000000", 159 => "011000000000000000", 
    160 => "100000000000000000", 161 => "010000000000000000", 
    162 => "110000000000000000", 163 => "100000000000000000", 
    164 to 165=> "000000000000000000", 166 => "110000000000000000", 
    167 to 168=> "000000000000000000", 169 => "100000000000000000", 
    170 => "000000000000000000", 171 => "100000000000000000", 
    172 to 968=> "000000000000000000", 969 to 974=> "000000000000000001", 
    975 to 977=> "000000000000000010", 978 to 979=> "000000000000000011", 
    980 to 981=> "000000000000000100", 982 => "000000000000000101", 
    983 to 984=> "000000000000000110", 985 => "000000000000000111", 
    986 => "000000000000001000", 987 => "000000000000001010", 
    988 => "000000000000001011", 989 => "000000000000001100", 
    990 => "000000000000001110", 991 => "000000000000010000", 
    992 => "000000000000010010", 993 => "000000000000010101", 
    994 => "000000000000011000", 995 => "000000000000011011", 
    996 => "000000000000011110", 997 => "000000000000100011", 
    998 => "000000000000100111", 999 => "000000000000101100", 
    1000 => "000000000000110010", 1001 => "000000000000111001", 
    1002 => "000000000001000001", 1003 => "000000000001001010", 
    1004 => "000000000001010100", 1005 => "000000000001011111", 
    1006 => "000000000001101011", 1007 => "000000000001111010", 
    1008 => "000000000010001010", 1009 => "000000000010011101", 
    1010 => "000000000010110001", 1011 => "000000000011001001", 
    1012 => "000000000011100100", 1013 => "000000000100000010", 
    1014 => "000000000100100101", 1015 => "000000000101001100", 
    1016 => "000000000101111000", 1017 => "000000000110101010", 
    1018 => "000000000111100011", 1019 => "000000001000100100", 
    1020 => "000000001001101101", 1021 => "000000001010111111", 
    1022 => "000000001100011101", 1023 => "000000001110000111" );
signal mem1 : mem_array := (
    0 => "000000010000000000", 1 => "000000010010001000", 
    2 => "000000010100100010", 3 => "000000010111010001", 
    4 => "000000011010011000", 5 => "000000011101111001", 
    6 => "000000100001110111", 7 => "000000100110011000", 
    8 => "000000101011011111", 9 => "000000110001010010", 
    10 => "000000110111110110", 11 => "000000111111010001", 
    12 => "000001000111101101", 13 => "000001010001010000", 
    14 => "000001011100000100", 15 => "000001101000010101", 
    16 => "000001110110001110", 17 => "000010000101111101", 
    18 => "000010010111110011", 19 => "000010101100000001", 
    20 => "000011000010111010", 21 => "000011011100110111", 
    22 => "000011111010010010", 23 => "000100011011100110", 
    24 => "000101000001010111", 25 => "000101101100001010", 
    26 => "000110011100101001", 27 => "000111010011100101", 
    28 => "001000010001110110", 29 => "001001011000011001", 
    30 => "001010101000010101", 31 => "001100000010111011", 
    32 => "001101101001100100", 33 => "001111011101111000", 
    34 => "010001100001101011", 35 => "010011110111000010", 
    36 => "010110100000010001", 37 => "011001100000000010", 
    38 => "011100111001010110", 39 => "100000101111100101", 
    40 => "100101000110100111", 41 => "101010000010110010", 
    42 => "101111101001000011", 43 => "110101111111000010", 
    44 => "111101001011000100", 45 => "000101010100010110", 
    46 => "001110100011000011", 47 => "011001000000011001", 
    48 => "100100110110110111", 49 => "110010010010010100", 
    50 => "000001100000001101", 51 => "010010101111110001", 
    52 => "100110010010010001", 53 => "111100011011010001", 
    54 => "010101100000111100", 55 => "110001111100011010", 
    56 => "010010001010001000", 57 => "110110101010010111", 
    58 => "100000000001101011", 59 => "001110111001011110", 
    60 => "000100000000101011", 61 => "000000001100011111", 
    62 => "000100011001001010", 63 => "010001101010111110", 
    64 => "101001001111010101", 65 => "001100011101111000", 
    66 => "111100111010000000", 67 => "111100010100010010", 
    68 => "001100101100010011", 69 => "110000010010100110", 
    70 => "101001101011000000", 71 => "111011101111001001", 
    72 => "101001110001010110", 73 => "110111011111111101", 
    74 => "101001001001000011", 75 => "000011011110101100", 
    76 => "001011111011101000", 77 => "001000101000110111", 
    78 => "000000100011101010", 79 => "111011100100100110", 
    80 => "000010100111011100", 81 => "011111110100000110", 
    82 => "011110101000101010", 83 => "001100000101000110", 
    84 => "110110111000000100", 85 => "101111101101101100", 
    86 => "001001100000011100", 87 => "011001101011111100", 
    88 => "111000100010010000", 89 => "000001100100101000", 
    90 => "010011111110110000", 91 => "010011000101110000", 
    92 => "100110111100011000", 93 => "111100111010000000", 
    94 => "001000011001000000", 95 => "000011101001100000", 
    96 => "110000101100110000", 97 => "011010010101100000", 
    98 => "010101010100100000", 99 => "000001101101010000", 
    100 => "001100010100100000", 101 => "110000011111100000", 
    102 => "111001111110100000", 103 => "000111000111000000", 
    104 => "001011010110100000", 105 => "010010000001000000", 
    106 => "000001100001000000", 107 => "011110111011000000", 
    108 => "010010000110000000", 109 => "101010010000000000", 
    110 => "100011010011000000", 111 => "101011101000000000", 
    112 => "101011000100000000", 113 => "001010010010000000", 
    114 => "111011101000000000", 115 => "000100101110000000", 
    116 => "001001110100000000", 117 => "011010001000000000", 
    118 => "111110010100000000", 119 => "001000011100000000", 
    120 => "100110010100000000", 121 => "110110100000000000", 
    122 => "011111011000000000", 123 => "101010000000000000", 
    124 => "100000101000000000", 125 => "110000001000000000", 
    126 => "001111100000000000", 127 => "101011010000000000", 
    128 => "010111110000000000", 129 => "001000100000000000", 
    130 => "010010000000000000", 131 => "101111110000000000", 
    132 => "010111110000000000", 133 => "011000000000000000", 
    134 => "111110000000000000", 135 => "001111100000000000", 
    136 => "010010000000000000", 137 => "100011000000000000", 
    138 => "100101100000000000", 139 => "001000000000000000", 
    140 => "100100000000000000", 141 => "111000000000000000", 
    142 => "001001000000000000", 143 => "100100000000000000", 
    144 => "010000000000000000", 145 => "110000000000000000", 
    146 => "010100000000000000", 147 => "011000000000000000", 
    148 => "000010000000000000", 149 => "101010000000000000", 
    150 => "001100000000000000", 151 => "110000000000000000", 
    152 => "100000000000000000", 153 => "001000000000000000", 
    154 => "000000000000000000", 155 => "111000000000000000", 
    156 => "101000000000000000", 157 => "100000000000000000", 
    158 => "000000000000000000", 159 => "011000000000000000", 
    160 => "100000000000000000", 161 => "010000000000000000", 
    162 => "110000000000000000", 163 => "100000000000000000", 
    164 to 165=> "000000000000000000", 166 => "110000000000000000", 
    167 to 168=> "000000000000000000", 169 => "100000000000000000", 
    170 => "000000000000000000", 171 => "100000000000000000", 
    172 to 968=> "000000000000000000", 969 to 974=> "000000000000000001", 
    975 to 977=> "000000000000000010", 978 to 979=> "000000000000000011", 
    980 to 981=> "000000000000000100", 982 => "000000000000000101", 
    983 to 984=> "000000000000000110", 985 => "000000000000000111", 
    986 => "000000000000001000", 987 => "000000000000001010", 
    988 => "000000000000001011", 989 => "000000000000001100", 
    990 => "000000000000001110", 991 => "000000000000010000", 
    992 => "000000000000010010", 993 => "000000000000010101", 
    994 => "000000000000011000", 995 => "000000000000011011", 
    996 => "000000000000011110", 997 => "000000000000100011", 
    998 => "000000000000100111", 999 => "000000000000101100", 
    1000 => "000000000000110010", 1001 => "000000000000111001", 
    1002 => "000000000001000001", 1003 => "000000000001001010", 
    1004 => "000000000001010100", 1005 => "000000000001011111", 
    1006 => "000000000001101011", 1007 => "000000000001111010", 
    1008 => "000000000010001010", 1009 => "000000000010011101", 
    1010 => "000000000010110001", 1011 => "000000000011001001", 
    1012 => "000000000011100100", 1013 => "000000000100000010", 
    1014 => "000000000100100101", 1015 => "000000000101001100", 
    1016 => "000000000101111000", 1017 => "000000000110101010", 
    1018 => "000000000111100011", 1019 => "000000001000100100", 
    1020 => "000000001001101101", 1021 => "000000001010111111", 
    1022 => "000000001100011101", 1023 => "000000001110000111" );
signal mem2 : mem_array := (
    0 => "000000010000000000", 1 => "000000010010001000", 
    2 => "000000010100100010", 3 => "000000010111010001", 
    4 => "000000011010011000", 5 => "000000011101111001", 
    6 => "000000100001110111", 7 => "000000100110011000", 
    8 => "000000101011011111", 9 => "000000110001010010", 
    10 => "000000110111110110", 11 => "000000111111010001", 
    12 => "000001000111101101", 13 => "000001010001010000", 
    14 => "000001011100000100", 15 => "000001101000010101", 
    16 => "000001110110001110", 17 => "000010000101111101", 
    18 => "000010010111110011", 19 => "000010101100000001", 
    20 => "000011000010111010", 21 => "000011011100110111", 
    22 => "000011111010010010", 23 => "000100011011100110", 
    24 => "000101000001010111", 25 => "000101101100001010", 
    26 => "000110011100101001", 27 => "000111010011100101", 
    28 => "001000010001110110", 29 => "001001011000011001", 
    30 => "001010101000010101", 31 => "001100000010111011", 
    32 => "001101101001100100", 33 => "001111011101111000", 
    34 => "010001100001101011", 35 => "010011110111000010", 
    36 => "010110100000010001", 37 => "011001100000000010", 
    38 => "011100111001010110", 39 => "100000101111100101", 
    40 => "100101000110100111", 41 => "101010000010110010", 
    42 => "101111101001000011", 43 => "110101111111000010", 
    44 => "111101001011000100", 45 => "000101010100010110", 
    46 => "001110100011000011", 47 => "011001000000011001", 
    48 => "100100110110110111", 49 => "110010010010010100", 
    50 => "000001100000001101", 51 => "010010101111110001", 
    52 => "100110010010010001", 53 => "111100011011010001", 
    54 => "010101100000111100", 55 => "110001111100011010", 
    56 => "010010001010001000", 57 => "110110101010010111", 
    58 => "100000000001101011", 59 => "001110111001011110", 
    60 => "000100000000101011", 61 => "000000001100011111", 
    62 => "000100011001001010", 63 => "010001101010111110", 
    64 => "101001001111010101", 65 => "001100011101111000", 
    66 => "111100111010000000", 67 => "111100010100010010", 
    68 => "001100101100010011", 69 => "110000010010100110", 
    70 => "101001101011000000", 71 => "111011101111001001", 
    72 => "101001110001010110", 73 => "110111011111111101", 
    74 => "101001001001000011", 75 => "000011011110101100", 
    76 => "001011111011101000", 77 => "001000101000110111", 
    78 => "000000100011101010", 79 => "111011100100100110", 
    80 => "000010100111011100", 81 => "011111110100000110", 
    82 => "011110101000101010", 83 => "001100000101000110", 
    84 => "110110111000000100", 85 => "101111101101101100", 
    86 => "001001100000011100", 87 => "011001101011111100", 
    88 => "111000100010010000", 89 => "000001100100101000", 
    90 => "010011111110110000", 91 => "010011000101110000", 
    92 => "100110111100011000", 93 => "111100111010000000", 
    94 => "001000011001000000", 95 => "000011101001100000", 
    96 => "110000101100110000", 97 => "011010010101100000", 
    98 => "010101010100100000", 99 => "000001101101010000", 
    100 => "001100010100100000", 101 => "110000011111100000", 
    102 => "111001111110100000", 103 => "000111000111000000", 
    104 => "001011010110100000", 105 => "010010000001000000", 
    106 => "000001100001000000", 107 => "011110111011000000", 
    108 => "010010000110000000", 109 => "101010010000000000", 
    110 => "100011010011000000", 111 => "101011101000000000", 
    112 => "101011000100000000", 113 => "001010010010000000", 
    114 => "111011101000000000", 115 => "000100101110000000", 
    116 => "001001110100000000", 117 => "011010001000000000", 
    118 => "111110010100000000", 119 => "001000011100000000", 
    120 => "100110010100000000", 121 => "110110100000000000", 
    122 => "011111011000000000", 123 => "101010000000000000", 
    124 => "100000101000000000", 125 => "110000001000000000", 
    126 => "001111100000000000", 127 => "101011010000000000", 
    128 => "010111110000000000", 129 => "001000100000000000", 
    130 => "010010000000000000", 131 => "101111110000000000", 
    132 => "010111110000000000", 133 => "011000000000000000", 
    134 => "111110000000000000", 135 => "001111100000000000", 
    136 => "010010000000000000", 137 => "100011000000000000", 
    138 => "100101100000000000", 139 => "001000000000000000", 
    140 => "100100000000000000", 141 => "111000000000000000", 
    142 => "001001000000000000", 143 => "100100000000000000", 
    144 => "010000000000000000", 145 => "110000000000000000", 
    146 => "010100000000000000", 147 => "011000000000000000", 
    148 => "000010000000000000", 149 => "101010000000000000", 
    150 => "001100000000000000", 151 => "110000000000000000", 
    152 => "100000000000000000", 153 => "001000000000000000", 
    154 => "000000000000000000", 155 => "111000000000000000", 
    156 => "101000000000000000", 157 => "100000000000000000", 
    158 => "000000000000000000", 159 => "011000000000000000", 
    160 => "100000000000000000", 161 => "010000000000000000", 
    162 => "110000000000000000", 163 => "100000000000000000", 
    164 to 165=> "000000000000000000", 166 => "110000000000000000", 
    167 to 168=> "000000000000000000", 169 => "100000000000000000", 
    170 => "000000000000000000", 171 => "100000000000000000", 
    172 to 968=> "000000000000000000", 969 to 974=> "000000000000000001", 
    975 to 977=> "000000000000000010", 978 to 979=> "000000000000000011", 
    980 to 981=> "000000000000000100", 982 => "000000000000000101", 
    983 to 984=> "000000000000000110", 985 => "000000000000000111", 
    986 => "000000000000001000", 987 => "000000000000001010", 
    988 => "000000000000001011", 989 => "000000000000001100", 
    990 => "000000000000001110", 991 => "000000000000010000", 
    992 => "000000000000010010", 993 => "000000000000010101", 
    994 => "000000000000011000", 995 => "000000000000011011", 
    996 => "000000000000011110", 997 => "000000000000100011", 
    998 => "000000000000100111", 999 => "000000000000101100", 
    1000 => "000000000000110010", 1001 => "000000000000111001", 
    1002 => "000000000001000001", 1003 => "000000000001001010", 
    1004 => "000000000001010100", 1005 => "000000000001011111", 
    1006 => "000000000001101011", 1007 => "000000000001111010", 
    1008 => "000000000010001010", 1009 => "000000000010011101", 
    1010 => "000000000010110001", 1011 => "000000000011001001", 
    1012 => "000000000011100100", 1013 => "000000000100000010", 
    1014 => "000000000100100101", 1015 => "000000000101001100", 
    1016 => "000000000101111000", 1017 => "000000000110101010", 
    1018 => "000000000111100011", 1019 => "000000001000100100", 
    1020 => "000000001001101101", 1021 => "000000001010111111", 
    1022 => "000000001100011101", 1023 => "000000001110000111" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem0 : signal is "block_rom";
attribute syn_rom_style of mem1 : signal is "block_rom";
attribute syn_rom_style of mem2 : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem0 : signal is "block";
attribute ROM_STYLE of mem1 : signal is "block";
attribute ROM_STYLE of mem2 : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

memory_access_guard_2: process (addr2) 
begin
      addr2_tmp <= addr2;
--synthesis translate_off
      if (CONV_INTEGER(addr2) > mem_size-1) then
           addr2_tmp <= (others => '0');
      else 
           addr2_tmp <= addr2;
      end if;
--synthesis translate_on
end process;

memory_access_guard_3: process (addr3) 
begin
      addr3_tmp <= addr3;
--synthesis translate_off
      if (CONV_INTEGER(addr3) > mem_size-1) then
           addr3_tmp <= (others => '0');
      else 
           addr3_tmp <= addr3;
      end if;
--synthesis translate_on
end process;

memory_access_guard_4: process (addr4) 
begin
      addr4_tmp <= addr4;
--synthesis translate_off
      if (CONV_INTEGER(addr4) > mem_size-1) then
           addr4_tmp <= (others => '0');
      else 
           addr4_tmp <= addr4;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem0(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem0(CONV_INTEGER(addr1_tmp)); 
        end if;
        if (ce2 = '1') then 
            q2 <= mem1(CONV_INTEGER(addr2_tmp)); 
        end if;
        if (ce3 = '1') then 
            q3 <= mem1(CONV_INTEGER(addr3_tmp)); 
        end if;
        if (ce4 = '1') then 
            q4 <= mem2(CONV_INTEGER(addr4_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table1 is
    generic (
        DataWidth : INTEGER := 18;
        AddressRange : INTEGER := 1024;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address2 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address3 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address4 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table1 is
    component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR;
            addr2 : IN STD_LOGIC_VECTOR;
            ce2 : IN STD_LOGIC;
            q2 : OUT STD_LOGIC_VECTOR;
            addr3 : IN STD_LOGIC_VECTOR;
            ce3 : IN STD_LOGIC;
            q3 : OUT STD_LOGIC_VECTOR;
            addr4 : IN STD_LOGIC_VECTOR;
            ce4 : IN STD_LOGIC;
            q4 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table1_rom_U :  component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1,
        addr2 => address2,
        ce2 => ce2,
        q2 => q2,
        addr3 => address3,
        ce3 => ce3,
        q3 => q3,
        addr4 => address4,
        ce4 => ce4,
        q4 => q4);

end architecture;


