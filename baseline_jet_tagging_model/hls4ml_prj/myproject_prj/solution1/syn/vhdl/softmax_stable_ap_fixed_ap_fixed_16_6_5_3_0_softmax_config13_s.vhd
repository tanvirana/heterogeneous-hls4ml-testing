-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exp_table1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce0 : STD_LOGIC;
    signal exp_table1_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce1 : STD_LOGIC;
    signal exp_table1_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce2 : STD_LOGIC;
    signal exp_table1_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce3 : STD_LOGIC;
    signal exp_table1_q3 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce4 : STD_LOGIC;
    signal exp_table1_q4 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table2_ce0 : STD_LOGIC;
    signal invert_table2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal data_4_V_read_1_reg_1055 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_V_read_1_reg_1055_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_V_read_1_reg_1055_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_V_read_1_reg_1062 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_V_read_1_reg_1062_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_V_read_1_reg_1062_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_V_read_1_reg_1068 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_V_read_1_reg_1068_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_V_read_1_reg_1068_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_V_read_1_reg_1074 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_V_read_1_reg_1074_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_V_read_1_reg_1074_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_V_read_1_reg_1080 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_V_read_1_reg_1080_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_V_read_1_reg_1080_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_reg_1086 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_reg_1091 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_2_fu_200_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_2_reg_1096 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_max_V_fu_212_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_max_V_reg_1102 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_fu_522_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_reg_1107 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_fu_556_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_reg_1112 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_590_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_reg_1117 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_fu_624_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_reg_1122 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_fu_658_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_reg_1127 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_reg_1127_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_reg_1127_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_0_V_reg_1152 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_1152_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_1152_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_1152_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_1152_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_1152_pp0_iter10_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1158 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1158_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1158_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1158_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1158_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1158_pp0_iter10_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1164 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1164_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1164_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1164_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1164_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1164_pp0_iter10_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1170 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1170_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1170_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1170_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1170_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1170_pp0_iter10_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_12_fu_706_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_12_reg_1181 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_13_fu_734_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_13_reg_1187 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_4_V_reg_1193 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_V_reg_1193_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_V_reg_1193_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_V_reg_1193_pp0_iter10_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_16_fu_820_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_16_reg_1200 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_V_5_fu_920_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_5_reg_1206 : STD_LOGIC_VECTOR (9 downto 0);
    signal inv_exp_sum_V_reg_1216 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1116_fu_932_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_1025_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_reg_1255 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_1031_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_1_reg_1260 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_1037_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_2_reg_1265 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_1043_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_3_reg_1270 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_1049_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_4_reg_1275 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln255_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_1_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_2_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_3_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_4_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_fu_928_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1496_fu_172_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_172_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_178_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_178_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_fu_184_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_1_fu_189_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_2_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_3_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_fu_218_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_1_fu_221_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_fu_224_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_fu_238_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_230_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_2_fu_276_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_1_fu_279_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_293_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_285_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_3_fu_331_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_2_fu_334_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_348_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_340_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_4_fu_386_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_3_fu_389_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_12_fu_403_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_395_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_5_fu_441_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_4_fu_444_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_fu_458_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_450_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_4_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_4_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_5_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_496_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_506_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_fu_514_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_6_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_530_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_1_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_540_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_1_fu_548_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_7_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_564_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_2_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_574_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_2_fu_582_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_8_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_598_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_3_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_6_fu_608_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_3_fu_616_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_9_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_632_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_4_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_8_fu_642_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_4_fu_650_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_6_fu_686_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_7_fu_689_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_8_fu_692_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_s_fu_698_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_fu_714_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_10_fu_717_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_11_fu_720_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_14_fu_726_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_745_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lhs_V_fu_742_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_fu_748_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_15_fu_762_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_16_fu_766_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_754_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_5_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_11_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_10_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_5_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_12_fu_804_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln388_5_fu_812_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_1_fu_831_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_1_fu_834_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_1_fu_837_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_17_fu_828_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_19_fu_851_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_18_fu_856_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_fu_843_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_6_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_13_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_12_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_894_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal underflow_1_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_6_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_14_fu_904_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_6_fu_912_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1025_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1025_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1031_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1031_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1037_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1037_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1043_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1043_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1049_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1049_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1025_ce : STD_LOGIC;
    signal grp_fu_1031_ce : STD_LOGIC;
    signal grp_fu_1037_ce : STD_LOGIC;
    signal grp_fu_1043_ce : STD_LOGIC;
    signal grp_fu_1049_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to13 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1025_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_1031_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_1037_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_1043_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_1049_p10 : STD_LOGIC_VECTOR (25 downto 0);

    component myproject_mul_mul_18s_17ns_26_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_invert_table2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table1_U : component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table1
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table1_address0,
        ce0 => exp_table1_ce0,
        q0 => exp_table1_q0,
        address1 => exp_table1_address1,
        ce1 => exp_table1_ce1,
        q1 => exp_table1_q1,
        address2 => exp_table1_address2,
        ce2 => exp_table1_ce2,
        q2 => exp_table1_q2,
        address3 => exp_table1_address3,
        ce3 => exp_table1_ce3,
        q3 => exp_table1_q3,
        address4 => exp_table1_address4,
        ce4 => exp_table1_ce4,
        q4 => exp_table1_q4);

    invert_table2_U : component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_invert_table2
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table2_address0,
        ce0 => invert_table2_ce0,
        q0 => invert_table2_q0);

    myproject_mul_mul_18s_17ns_26_3_1_U1785 : component myproject_mul_mul_18s_17ns_26_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1025_p0,
        din1 => grp_fu_1025_p1,
        ce => grp_fu_1025_ce,
        dout => grp_fu_1025_p2);

    myproject_mul_mul_18s_17ns_26_3_1_U1786 : component myproject_mul_mul_18s_17ns_26_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1031_p0,
        din1 => grp_fu_1031_p1,
        ce => grp_fu_1031_ce,
        dout => grp_fu_1031_p2);

    myproject_mul_mul_18s_17ns_26_3_1_U1787 : component myproject_mul_mul_18s_17ns_26_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1037_p0,
        din1 => grp_fu_1037_p1,
        ce => grp_fu_1037_ce,
        dout => grp_fu_1037_p2);

    myproject_mul_mul_18s_17ns_26_3_1_U1788 : component myproject_mul_mul_18s_17ns_26_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1043_p0,
        din1 => grp_fu_1043_p1,
        ce => grp_fu_1043_ce,
        dout => grp_fu_1043_p2);

    myproject_mul_mul_18s_17ns_26_3_1_U1789 : component myproject_mul_mul_18s_17ns_26_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1049_p0,
        din1 => grp_fu_1049_p1,
        ce => grp_fu_1049_ce,
        dout => grp_fu_1049_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_0_V_read_1_reg_1080 <= data_0_V_read;
                data_0_V_read_1_reg_1080_pp0_iter1_reg <= data_0_V_read_1_reg_1080;
                data_1_V_read_1_reg_1074 <= data_1_V_read;
                data_1_V_read_1_reg_1074_pp0_iter1_reg <= data_1_V_read_1_reg_1074;
                data_2_V_read_1_reg_1068 <= data_2_V_read;
                data_2_V_read_1_reg_1068_pp0_iter1_reg <= data_2_V_read_1_reg_1068;
                data_3_V_read_1_reg_1062 <= data_3_V_read;
                data_3_V_read_1_reg_1062_pp0_iter1_reg <= data_3_V_read_1_reg_1062;
                data_4_V_read_1_reg_1055 <= data_4_V_read;
                data_4_V_read_1_reg_1055_pp0_iter1_reg <= data_4_V_read_1_reg_1055;
                icmp_ln1496_1_reg_1091 <= icmp_ln1496_1_fu_178_p2;
                icmp_ln1496_reg_1086 <= icmp_ln1496_fu_172_p2;
                select_ln66_2_reg_1096 <= select_ln66_2_fu_200_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data_0_V_read_1_reg_1080_pp0_iter2_reg <= data_0_V_read_1_reg_1080_pp0_iter1_reg;
                data_1_V_read_1_reg_1074_pp0_iter2_reg <= data_1_V_read_1_reg_1074_pp0_iter1_reg;
                data_2_V_read_1_reg_1068_pp0_iter2_reg <= data_2_V_read_1_reg_1068_pp0_iter1_reg;
                data_3_V_read_1_reg_1062_pp0_iter2_reg <= data_3_V_read_1_reg_1062_pp0_iter1_reg;
                data_4_V_read_1_reg_1055_pp0_iter2_reg <= data_4_V_read_1_reg_1055_pp0_iter1_reg;
                exp_res_0_V_reg_1152_pp0_iter10_reg <= exp_res_0_V_reg_1152_pp0_iter9_reg;
                exp_res_0_V_reg_1152_pp0_iter6_reg <= exp_res_0_V_reg_1152;
                exp_res_0_V_reg_1152_pp0_iter7_reg <= exp_res_0_V_reg_1152_pp0_iter6_reg;
                exp_res_0_V_reg_1152_pp0_iter8_reg <= exp_res_0_V_reg_1152_pp0_iter7_reg;
                exp_res_0_V_reg_1152_pp0_iter9_reg <= exp_res_0_V_reg_1152_pp0_iter8_reg;
                exp_res_1_V_reg_1158_pp0_iter10_reg <= exp_res_1_V_reg_1158_pp0_iter9_reg;
                exp_res_1_V_reg_1158_pp0_iter6_reg <= exp_res_1_V_reg_1158;
                exp_res_1_V_reg_1158_pp0_iter7_reg <= exp_res_1_V_reg_1158_pp0_iter6_reg;
                exp_res_1_V_reg_1158_pp0_iter8_reg <= exp_res_1_V_reg_1158_pp0_iter7_reg;
                exp_res_1_V_reg_1158_pp0_iter9_reg <= exp_res_1_V_reg_1158_pp0_iter8_reg;
                exp_res_2_V_reg_1164_pp0_iter10_reg <= exp_res_2_V_reg_1164_pp0_iter9_reg;
                exp_res_2_V_reg_1164_pp0_iter6_reg <= exp_res_2_V_reg_1164;
                exp_res_2_V_reg_1164_pp0_iter7_reg <= exp_res_2_V_reg_1164_pp0_iter6_reg;
                exp_res_2_V_reg_1164_pp0_iter8_reg <= exp_res_2_V_reg_1164_pp0_iter7_reg;
                exp_res_2_V_reg_1164_pp0_iter9_reg <= exp_res_2_V_reg_1164_pp0_iter8_reg;
                exp_res_3_V_reg_1170_pp0_iter10_reg <= exp_res_3_V_reg_1170_pp0_iter9_reg;
                exp_res_3_V_reg_1170_pp0_iter6_reg <= exp_res_3_V_reg_1170;
                exp_res_3_V_reg_1170_pp0_iter7_reg <= exp_res_3_V_reg_1170_pp0_iter6_reg;
                exp_res_3_V_reg_1170_pp0_iter8_reg <= exp_res_3_V_reg_1170_pp0_iter7_reg;
                exp_res_3_V_reg_1170_pp0_iter9_reg <= exp_res_3_V_reg_1170_pp0_iter8_reg;
                exp_res_4_V_reg_1193_pp0_iter10_reg <= exp_res_4_V_reg_1193_pp0_iter9_reg;
                exp_res_4_V_reg_1193_pp0_iter8_reg <= exp_res_4_V_reg_1193;
                exp_res_4_V_reg_1193_pp0_iter9_reg <= exp_res_4_V_reg_1193_pp0_iter8_reg;
                inv_exp_sum_V_reg_1216 <= invert_table2_q0;
                mul_ln1118_1_reg_1260 <= grp_fu_1031_p2;
                mul_ln1118_2_reg_1265 <= grp_fu_1037_p2;
                mul_ln1118_3_reg_1270 <= grp_fu_1043_p2;
                mul_ln1118_4_reg_1275 <= grp_fu_1049_p2;
                mul_ln1118_reg_1255 <= grp_fu_1025_p2;
                p_Val2_12_reg_1181 <= p_Val2_12_fu_706_p3;
                p_Val2_13_reg_1187 <= p_Val2_13_fu_734_p3;
                p_Val2_16_reg_1200 <= p_Val2_16_fu_820_p3;
                x_max_V_reg_1102 <= x_max_V_fu_212_p3;
                y_V_1_reg_1112 <= y_V_1_fu_556_p3;
                y_V_2_reg_1117 <= y_V_2_fu_590_p3;
                y_V_3_reg_1122 <= y_V_3_fu_624_p3;
                y_V_4_reg_1127 <= y_V_4_fu_658_p3;
                y_V_4_reg_1127_pp0_iter4_reg <= y_V_4_reg_1127;
                y_V_4_reg_1127_pp0_iter5_reg <= y_V_4_reg_1127_pp0_iter4_reg;
                y_V_5_reg_1206 <= y_V_5_fu_920_p3;
                y_V_reg_1107 <= y_V_fu_522_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                exp_res_0_V_reg_1152 <= exp_table1_q0;
                exp_res_1_V_reg_1158 <= exp_table1_q1;
                exp_res_2_V_reg_1164 <= exp_table1_q2;
                exp_res_3_V_reg_1170 <= exp_table1_q3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                exp_res_4_V_reg_1193 <= exp_table1_q4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln786_1_fu_307_p2 <= (xor_ln786_1_fu_301_p2 and tmp_5_fu_285_p3);
    and_ln786_2_fu_362_p2 <= (xor_ln786_2_fu_356_p2 and tmp_9_fu_340_p3);
    and_ln786_3_fu_417_p2 <= (xor_ln786_3_fu_411_p2 and tmp_11_fu_395_p3);
    and_ln786_4_fu_472_p2 <= (xor_ln786_4_fu_466_p2 and tmp_13_fu_450_p3);
    and_ln786_fu_252_p2 <= (xor_ln786_fu_246_p2 and tmp_1_fu_230_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to13_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to13 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to13)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= mul_ln1118_reg_1255(25 downto 10);
    ap_return_1 <= mul_ln1118_1_reg_1260(25 downto 10);
    ap_return_2 <= mul_ln1118_2_reg_1265(25 downto 10);
    ap_return_3 <= mul_ln1118_3_reg_1270(25 downto 10);
    ap_return_4 <= mul_ln1118_4_reg_1275(25 downto 10);
    exp_table1_address0 <= zext_ln255_fu_666_p1(10 - 1 downto 0);
    exp_table1_address1 <= zext_ln255_1_fu_670_p1(10 - 1 downto 0);
    exp_table1_address2 <= zext_ln255_2_fu_674_p1(10 - 1 downto 0);
    exp_table1_address3 <= zext_ln255_3_fu_678_p1(10 - 1 downto 0);
    exp_table1_address4 <= zext_ln255_4_fu_682_p1(10 - 1 downto 0);

    exp_table1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table1_ce0 <= ap_const_logic_1;
        else 
            exp_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table1_ce1 <= ap_const_logic_1;
        else 
            exp_table1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce2_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table1_ce2 <= ap_const_logic_1;
        else 
            exp_table1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce3_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table1_ce3 <= ap_const_logic_1;
        else 
            exp_table1_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce4_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            exp_table1_ce4 <= ap_const_logic_1;
        else 
            exp_table1_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1025_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1025_ce <= ap_const_logic_1;
        else 
            grp_fu_1025_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1025_p0 <= sext_ln1116_fu_932_p1(18 - 1 downto 0);
    grp_fu_1025_p1 <= grp_fu_1025_p10(17 - 1 downto 0);
    grp_fu_1025_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_1152_pp0_iter10_reg),26));

    grp_fu_1031_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1031_ce <= ap_const_logic_1;
        else 
            grp_fu_1031_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1031_p0 <= sext_ln1116_fu_932_p1(18 - 1 downto 0);
    grp_fu_1031_p1 <= grp_fu_1031_p10(17 - 1 downto 0);
    grp_fu_1031_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_1158_pp0_iter10_reg),26));

    grp_fu_1037_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1037_ce <= ap_const_logic_1;
        else 
            grp_fu_1037_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1037_p0 <= sext_ln1116_fu_932_p1(18 - 1 downto 0);
    grp_fu_1037_p1 <= grp_fu_1037_p10(17 - 1 downto 0);
    grp_fu_1037_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_1164_pp0_iter10_reg),26));

    grp_fu_1043_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1043_ce <= ap_const_logic_1;
        else 
            grp_fu_1043_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1043_p0 <= sext_ln1116_fu_932_p1(18 - 1 downto 0);
    grp_fu_1043_p1 <= grp_fu_1043_p10(17 - 1 downto 0);
    grp_fu_1043_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_3_V_reg_1170_pp0_iter10_reg),26));

    grp_fu_1049_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1049_ce <= ap_const_logic_1;
        else 
            grp_fu_1049_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1049_p0 <= sext_ln1116_fu_932_p1(18 - 1 downto 0);
    grp_fu_1049_p1 <= grp_fu_1049_p10(17 - 1 downto 0);
    grp_fu_1049_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_4_V_reg_1193_pp0_iter10_reg),26));
    icmp_ln1496_1_fu_178_p0 <= data_2_V_read;
    icmp_ln1496_1_fu_178_p1 <= data_3_V_read;
    icmp_ln1496_1_fu_178_p2 <= "1" when (signed(icmp_ln1496_1_fu_178_p0) < signed(icmp_ln1496_1_fu_178_p1)) else "0";
    icmp_ln1496_2_fu_194_p2 <= "1" when (signed(select_ln66_fu_184_p3) < signed(select_ln66_1_fu_189_p3)) else "0";
    icmp_ln1496_3_fu_208_p2 <= "1" when (signed(select_ln66_2_reg_1096) < signed(data_4_V_read_1_reg_1055_pp0_iter1_reg)) else "0";
    icmp_ln1496_fu_172_p0 <= data_0_V_read;
    icmp_ln1496_fu_172_p1 <= data_1_V_read;
    icmp_ln1496_fu_172_p2 <= "1" when (signed(icmp_ln1496_fu_172_p0) < signed(icmp_ln1496_fu_172_p1)) else "0";
    invert_table2_address0 <= zext_ln265_fu_928_p1(10 - 1 downto 0);

    invert_table2_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            invert_table2_ce0 <= ap_const_logic_1;
        else 
            invert_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_1_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_16_reg_1200),19));

        lhs_V_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_12_reg_1181),19));

    or_ln340_1_fu_325_p2 <= (xor_ln340_1_fu_319_p2 or tmp_7_fu_293_p3);
    or_ln340_2_fu_380_p2 <= (xor_ln340_2_fu_374_p2 or tmp_10_fu_348_p3);
    or_ln340_3_fu_435_p2 <= (xor_ln340_3_fu_429_p2 or tmp_12_fu_403_p3);
    or_ln340_4_fu_490_p2 <= (xor_ln340_4_fu_484_p2 or tmp_14_fu_458_p3);
    or_ln340_5_fu_798_p2 <= (xor_ln340_11_fu_792_p2 or p_Result_16_fu_766_p3);
    or_ln340_6_fu_888_p2 <= (xor_ln340_13_fu_882_p2 or p_Result_18_fu_856_p3);
    or_ln340_fu_270_p2 <= (xor_ln340_fu_264_p2 or tmp_3_fu_238_p3);
    p_Result_14_fu_726_p3 <= p_Val2_11_fu_720_p2(17 downto 17);
    p_Result_15_fu_754_p3 <= ret_V_fu_748_p2(18 downto 18);
    p_Result_16_fu_766_p3 <= p_Val2_15_fu_762_p2(17 downto 17);
    p_Result_17_fu_843_p3 <= ret_V_1_fu_837_p2(18 downto 18);
    p_Result_18_fu_856_p3 <= p_Val2_19_fu_851_p2(17 downto 17);
    p_Result_s_fu_698_p3 <= p_Val2_8_fu_692_p2(17 downto 17);
    p_Val2_10_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_3_V_reg_1170),18));
    p_Val2_11_fu_720_p2 <= std_logic_vector(unsigned(p_Val2_9_fu_714_p1) + unsigned(p_Val2_10_fu_717_p1));
    p_Val2_12_fu_706_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_s_fu_698_p3(0) = '1') else 
        p_Val2_8_fu_692_p2;
    p_Val2_13_fu_734_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_14_fu_726_p3(0) = '1') else 
        p_Val2_11_fu_720_p2;
    p_Val2_15_fu_762_p2 <= std_logic_vector(signed(p_Val2_12_reg_1181) + signed(p_Val2_13_reg_1187));
    p_Val2_16_fu_820_p3 <= 
        select_ln340_12_fu_804_p3 when (or_ln340_5_fu_798_p2(0) = '1') else 
        select_ln388_5_fu_812_p3;
    p_Val2_17_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_4_V_reg_1193),18));
    p_Val2_19_fu_851_p2 <= std_logic_vector(unsigned(p_Val2_17_fu_828_p1) + unsigned(p_Val2_16_reg_1200));
    p_Val2_6_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_1152),18));
    p_Val2_7_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_1158),18));
    p_Val2_8_fu_692_p2 <= std_logic_vector(unsigned(p_Val2_6_fu_686_p1) + unsigned(p_Val2_7_fu_689_p1));
    p_Val2_9_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_1164),18));
    ret_V_1_fu_837_p2 <= std_logic_vector(signed(lhs_V_1_fu_831_p1) + signed(rhs_V_1_fu_834_p1));
    ret_V_fu_748_p2 <= std_logic_vector(signed(rhs_V_fu_745_p1) + signed(lhs_V_fu_742_p1));
    rhs_V_1_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_4_V_reg_1193),19));
        rhs_V_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_13_reg_1187),19));

    select_ln340_12_fu_804_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln340_10_fu_786_p2(0) = '1') else 
        p_Val2_15_fu_762_p2;
    select_ln340_14_fu_904_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_12_fu_876_p2(0) = '1') else 
        tmp_s_fu_894_p4;
    select_ln340_2_fu_540_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_6_fu_313_p2(0) = '1') else 
        tmp_2_fu_530_p4;
    select_ln340_4_fu_574_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_7_fu_368_p2(0) = '1') else 
        tmp_4_fu_564_p4;
    select_ln340_6_fu_608_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_8_fu_423_p2(0) = '1') else 
        tmp_6_fu_598_p4;
    select_ln340_8_fu_642_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_9_fu_478_p2(0) = '1') else 
        tmp_8_fu_632_p4;
    select_ln340_fu_506_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_5_fu_258_p2(0) = '1') else 
        tmp_fu_496_p4;
    select_ln388_1_fu_548_p3 <= 
        ap_const_lv10_200 when (and_ln786_1_fu_307_p2(0) = '1') else 
        tmp_2_fu_530_p4;
    select_ln388_2_fu_582_p3 <= 
        ap_const_lv10_200 when (and_ln786_2_fu_362_p2(0) = '1') else 
        tmp_4_fu_564_p4;
    select_ln388_3_fu_616_p3 <= 
        ap_const_lv10_200 when (and_ln786_3_fu_417_p2(0) = '1') else 
        tmp_6_fu_598_p4;
    select_ln388_4_fu_650_p3 <= 
        ap_const_lv10_200 when (and_ln786_4_fu_472_p2(0) = '1') else 
        tmp_8_fu_632_p4;
    select_ln388_5_fu_812_p3 <= 
        ap_const_lv18_20000 when (underflow_fu_780_p2(0) = '1') else 
        p_Val2_15_fu_762_p2;
    select_ln388_6_fu_912_p3 <= 
        ap_const_lv10_200 when (underflow_1_fu_870_p2(0) = '1') else 
        tmp_s_fu_894_p4;
    select_ln388_fu_514_p3 <= 
        ap_const_lv10_200 when (and_ln786_fu_252_p2(0) = '1') else 
        tmp_fu_496_p4;
    select_ln66_1_fu_189_p3 <= 
        data_3_V_read_1_reg_1062 when (icmp_ln1496_1_reg_1091(0) = '1') else 
        data_2_V_read_1_reg_1068;
    select_ln66_2_fu_200_p3 <= 
        select_ln66_1_fu_189_p3 when (icmp_ln1496_2_fu_194_p2(0) = '1') else 
        select_ln66_fu_184_p3;
    select_ln66_fu_184_p3 <= 
        data_1_V_read_1_reg_1074 when (icmp_ln1496_reg_1086(0) = '1') else 
        data_0_V_read_1_reg_1080;
        sext_ln1116_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inv_exp_sum_V_reg_1216),26));

        sext_ln703_1_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_reg_1102),17));

        sext_ln703_2_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_1_V_read_1_reg_1074_pp0_iter2_reg),17));

        sext_ln703_3_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_2_V_read_1_reg_1068_pp0_iter2_reg),17));

        sext_ln703_4_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_3_V_read_1_reg_1062_pp0_iter2_reg),17));

        sext_ln703_5_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_4_V_read_1_reg_1055_pp0_iter2_reg),17));

        sext_ln703_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_0_V_read_1_reg_1080_pp0_iter2_reg),17));

    sub_ln1193_1_fu_279_p2 <= std_logic_vector(signed(sext_ln703_2_fu_276_p1) - signed(sext_ln703_1_fu_221_p1));
    sub_ln1193_2_fu_334_p2 <= std_logic_vector(signed(sext_ln703_3_fu_331_p1) - signed(sext_ln703_1_fu_221_p1));
    sub_ln1193_3_fu_389_p2 <= std_logic_vector(signed(sext_ln703_4_fu_386_p1) - signed(sext_ln703_1_fu_221_p1));
    sub_ln1193_4_fu_444_p2 <= std_logic_vector(signed(sext_ln703_5_fu_441_p1) - signed(sext_ln703_1_fu_221_p1));
    sub_ln1193_fu_224_p2 <= std_logic_vector(signed(sext_ln703_fu_218_p1) - signed(sext_ln703_1_fu_221_p1));
    tmp_10_fu_348_p3 <= sub_ln1193_2_fu_334_p2(15 downto 15);
    tmp_11_fu_395_p3 <= sub_ln1193_3_fu_389_p2(16 downto 16);
    tmp_12_fu_403_p3 <= sub_ln1193_3_fu_389_p2(15 downto 15);
    tmp_13_fu_450_p3 <= sub_ln1193_4_fu_444_p2(16 downto 16);
    tmp_14_fu_458_p3 <= sub_ln1193_4_fu_444_p2(15 downto 15);
    tmp_1_fu_230_p3 <= sub_ln1193_fu_224_p2(16 downto 16);
    tmp_2_fu_530_p4 <= sub_ln1193_1_fu_279_p2(15 downto 6);
    tmp_3_fu_238_p3 <= sub_ln1193_fu_224_p2(15 downto 15);
    tmp_4_fu_564_p4 <= sub_ln1193_2_fu_334_p2(15 downto 6);
    tmp_5_fu_285_p3 <= sub_ln1193_1_fu_279_p2(16 downto 16);
    tmp_6_fu_598_p4 <= sub_ln1193_3_fu_389_p2(15 downto 6);
    tmp_7_fu_293_p3 <= sub_ln1193_1_fu_279_p2(15 downto 15);
    tmp_8_fu_632_p4 <= sub_ln1193_4_fu_444_p2(15 downto 6);
    tmp_9_fu_340_p3 <= sub_ln1193_2_fu_334_p2(16 downto 16);
    tmp_fu_496_p4 <= sub_ln1193_fu_224_p2(15 downto 6);
    tmp_s_fu_894_p4 <= p_Val2_19_fu_851_p2(17 downto 8);
    underflow_1_fu_870_p2 <= (xor_ln786_6_fu_864_p2 and p_Result_17_fu_843_p3);
    underflow_fu_780_p2 <= (xor_ln786_5_fu_774_p2 and p_Result_15_fu_754_p3);
    x_max_V_fu_212_p3 <= 
        data_4_V_read_1_reg_1055_pp0_iter1_reg when (icmp_ln1496_3_fu_208_p2(0) = '1') else 
        select_ln66_2_reg_1096;
    xor_ln340_10_fu_786_p2 <= (p_Result_16_fu_766_p3 xor p_Result_15_fu_754_p3);
    xor_ln340_11_fu_792_p2 <= (p_Result_15_fu_754_p3 xor ap_const_lv1_1);
    xor_ln340_12_fu_876_p2 <= (p_Result_18_fu_856_p3 xor p_Result_17_fu_843_p3);
    xor_ln340_13_fu_882_p2 <= (p_Result_17_fu_843_p3 xor ap_const_lv1_1);
    xor_ln340_1_fu_319_p2 <= (tmp_5_fu_285_p3 xor ap_const_lv1_1);
    xor_ln340_2_fu_374_p2 <= (tmp_9_fu_340_p3 xor ap_const_lv1_1);
    xor_ln340_3_fu_429_p2 <= (tmp_11_fu_395_p3 xor ap_const_lv1_1);
    xor_ln340_4_fu_484_p2 <= (tmp_13_fu_450_p3 xor ap_const_lv1_1);
    xor_ln340_5_fu_258_p2 <= (tmp_3_fu_238_p3 xor tmp_1_fu_230_p3);
    xor_ln340_6_fu_313_p2 <= (tmp_7_fu_293_p3 xor tmp_5_fu_285_p3);
    xor_ln340_7_fu_368_p2 <= (tmp_9_fu_340_p3 xor tmp_10_fu_348_p3);
    xor_ln340_8_fu_423_p2 <= (tmp_12_fu_403_p3 xor tmp_11_fu_395_p3);
    xor_ln340_9_fu_478_p2 <= (tmp_14_fu_458_p3 xor tmp_13_fu_450_p3);
    xor_ln340_fu_264_p2 <= (tmp_1_fu_230_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_301_p2 <= (tmp_7_fu_293_p3 xor ap_const_lv1_1);
    xor_ln786_2_fu_356_p2 <= (tmp_10_fu_348_p3 xor ap_const_lv1_1);
    xor_ln786_3_fu_411_p2 <= (tmp_12_fu_403_p3 xor ap_const_lv1_1);
    xor_ln786_4_fu_466_p2 <= (tmp_14_fu_458_p3 xor ap_const_lv1_1);
    xor_ln786_5_fu_774_p2 <= (p_Result_16_fu_766_p3 xor ap_const_lv1_1);
    xor_ln786_6_fu_864_p2 <= (p_Result_18_fu_856_p3 xor ap_const_lv1_1);
    xor_ln786_fu_246_p2 <= (tmp_3_fu_238_p3 xor ap_const_lv1_1);
    y_V_1_fu_556_p3 <= 
        select_ln340_2_fu_540_p3 when (or_ln340_1_fu_325_p2(0) = '1') else 
        select_ln388_1_fu_548_p3;
    y_V_2_fu_590_p3 <= 
        select_ln340_4_fu_574_p3 when (or_ln340_2_fu_380_p2(0) = '1') else 
        select_ln388_2_fu_582_p3;
    y_V_3_fu_624_p3 <= 
        select_ln340_6_fu_608_p3 when (or_ln340_3_fu_435_p2(0) = '1') else 
        select_ln388_3_fu_616_p3;
    y_V_4_fu_658_p3 <= 
        select_ln340_8_fu_642_p3 when (or_ln340_4_fu_490_p2(0) = '1') else 
        select_ln388_4_fu_650_p3;
    y_V_5_fu_920_p3 <= 
        select_ln340_14_fu_904_p3 when (or_ln340_6_fu_888_p2(0) = '1') else 
        select_ln388_6_fu_912_p3;
    y_V_fu_522_p3 <= 
        select_ln340_fu_506_p3 when (or_ln340_fu_270_p2(0) = '1') else 
        select_ln388_fu_514_p3;
    zext_ln255_1_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_reg_1112),64));
    zext_ln255_2_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_reg_1117),64));
    zext_ln255_3_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_reg_1122),64));
    zext_ln255_4_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_4_reg_1127_pp0_iter5_reg),64));
    zext_ln255_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_reg_1107),64));
    zext_ln265_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_5_reg_1206),64));
end behav;
